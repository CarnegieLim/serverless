<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>copy_fs_struct (4 samples, 1.08%)</title><rect x="286.0" y="261" width="12.7" height="15.0" fill="rgb(254,216,30)" rx="2" ry="2" />
<text  x="288.97" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (294 samples, 79.03%)</title><rect x="228.9" y="357" width="932.6" height="15.0" fill="rgb(209,194,18)" rx="2" ry="2" />
<text  x="231.87" y="367.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="22.7" y="245" width="3.2" height="15.0" fill="rgb(212,185,32)" rx="2" ry="2" />
<text  x="25.69" y="255.5" ></text>
</g>
<g >
<title>generic_permission (1 samples, 0.27%)</title><rect x="1161.5" y="213" width="3.1" height="15.0" fill="rgb(241,142,48)" rx="2" ry="2" />
<text  x="1164.45" y="223.5" ></text>
</g>
<g >
<title>__lock_text_start (11 samples, 2.96%)</title><rect x="530.2" y="213" width="34.9" height="15.0" fill="rgb(223,12,40)" rx="2" ry="2" />
<text  x="533.22" y="223.5" >__..</text>
</g>
<g >
<title>all (372 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(210,94,15)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.27%)</title><rect x="260.6" y="245" width="3.2" height="15.0" fill="rgb(246,65,52)" rx="2" ry="2" />
<text  x="263.59" y="255.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.27%)</title><rect x="926.7" y="117" width="3.2" height="15.0" fill="rgb(228,49,7)" rx="2" ry="2" />
<text  x="929.72" y="127.5" ></text>
</g>
<g >
<title>__vmalloc_node_range (23 samples, 6.18%)</title><rect x="343.1" y="245" width="72.9" height="15.0" fill="rgb(250,113,13)" rx="2" ry="2" />
<text  x="346.06" y="255.5" >__vmallo..</text>
</g>
<g >
<title>insert_vmap_area.constprop.0 (1 samples, 0.27%)</title><rect x="365.3" y="197" width="3.1" height="15.0" fill="rgb(212,146,6)" rx="2" ry="2" />
<text  x="368.27" y="207.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.27%)</title><rect x="904.5" y="53" width="3.2" height="15.0" fill="rgb(221,84,20)" rx="2" ry="2" />
<text  x="907.52" y="63.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.27%)</title><rect x="926.7" y="133" width="3.2" height="15.0" fill="rgb(248,8,35)" rx="2" ry="2" />
<text  x="929.72" y="143.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.27%)</title><rect x="1183.7" y="245" width="3.1" height="15.0" fill="rgb(245,83,36)" rx="2" ry="2" />
<text  x="1186.66" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (7 samples, 1.88%)</title><rect x="428.7" y="133" width="22.2" height="15.0" fill="rgb(225,85,29)" rx="2" ry="2" />
<text  x="431.71" y="143.5" >_..</text>
</g>
<g >
<title>mutex_unlock (3 samples, 0.81%)</title><rect x="952.1" y="229" width="9.5" height="15.0" fill="rgb(240,220,34)" rx="2" ry="2" />
<text  x="955.10" y="239.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="19.5" y="245" width="3.2" height="15.0" fill="rgb(233,177,6)" rx="2" ry="2" />
<text  x="22.52" y="255.5" ></text>
</g>
<g >
<title>__init_waitqueue_head (1 samples, 0.27%)</title><rect x="257.4" y="245" width="3.2" height="15.0" fill="rgb(216,117,41)" rx="2" ry="2" />
<text  x="260.42" y="255.5" ></text>
</g>
<g >
<title>copy_process (239 samples, 64.25%)</title><rect x="232.0" y="277" width="758.2" height="15.0" fill="rgb(217,90,30)" rx="2" ry="2" />
<text  x="235.04" y="287.5" >copy_process</text>
</g>
<g >
<title>inode_permission (1 samples, 0.27%)</title><rect x="1161.5" y="229" width="3.1" height="15.0" fill="rgb(227,165,19)" rx="2" ry="2" />
<text  x="1164.45" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.27%)</title><rect x="247.9" y="261" width="3.2" height="15.0" fill="rgb(228,35,15)" rx="2" ry="2" />
<text  x="250.90" y="271.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.27%)</title><rect x="1174.1" y="261" width="3.2" height="15.0" fill="rgb(254,194,23)" rx="2" ry="2" />
<text  x="1177.14" y="271.5" ></text>
</g>
<g >
<title>arch_dup_task_struct (1 samples, 0.27%)</title><rect x="263.8" y="261" width="3.1" height="15.0" fill="rgb(247,20,19)" rx="2" ry="2" />
<text  x="266.76" y="271.5" ></text>
</g>
<g >
<title>copy_thread_tls (1 samples, 0.27%)</title><rect x="301.8" y="261" width="3.2" height="15.0" fill="rgb(241,73,26)" rx="2" ry="2" />
<text  x="304.83" y="271.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.27%)</title><rect x="1183.7" y="293" width="3.1" height="15.0" fill="rgb(252,205,30)" rx="2" ry="2" />
<text  x="1186.66" y="303.5" ></text>
</g>
<g >
<title>path_openat (1 samples, 0.27%)</title><rect x="1161.5" y="261" width="3.1" height="15.0" fill="rgb(249,49,39)" rx="2" ry="2" />
<text  x="1164.45" y="271.5" ></text>
</g>
<g >
<title>__libc_start_main (363 samples, 97.58%)</title><rect x="10.0" y="389" width="1151.5" height="15.0" fill="rgb(230,14,35)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >__libc_start_main</text>
</g>
<g >
<title>allocate_slab (74 samples, 19.89%)</title><rect x="682.5" y="133" width="234.7" height="15.0" fill="rgb(206,140,45)" rx="2" ry="2" />
<text  x="685.47" y="143.5" >allocate_slab</text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.27%)</title><rect x="596.8" y="197" width="3.2" height="15.0" fill="rgb(225,155,49)" rx="2" ry="2" />
<text  x="599.83" y="207.5" ></text>
</g>
<g >
<title>path_get (4 samples, 1.08%)</title><rect x="286.0" y="245" width="12.7" height="15.0" fill="rgb(213,76,0)" rx="2" ry="2" />
<text  x="288.97" y="255.5" ></text>
</g>
<g >
<title>perf_event_task_output (3 samples, 0.81%)</title><rect x="495.3" y="197" width="9.5" height="15.0" fill="rgb(248,160,4)" rx="2" ry="2" />
<text  x="498.32" y="207.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.27%)</title><rect x="476.3" y="149" width="3.2" height="15.0" fill="rgb(237,149,34)" rx="2" ry="2" />
<text  x="479.29" y="159.5" ></text>
</g>
<g >
<title>__clone (295 samples, 79.30%)</title><rect x="225.7" y="373" width="935.8" height="15.0" fill="rgb(232,5,30)" rx="2" ry="2" />
<text  x="228.70" y="383.5" >__clone</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.27%)</title><rect x="1183.7" y="389" width="3.1" height="15.0" fill="rgb(249,161,41)" rx="2" ry="2" />
<text  x="1186.66" y="399.5" ></text>
</g>
<g >
<title>should_failslab (2 samples, 0.54%)</title><rect x="939.4" y="197" width="6.4" height="15.0" fill="rgb(216,158,2)" rx="2" ry="2" />
<text  x="942.41" y="207.5" ></text>
</g>
<g >
<title>__do_sys_wait4 (1 samples, 0.27%)</title><rect x="16.3" y="325" width="3.2" height="15.0" fill="rgb(254,58,2)" rx="2" ry="2" />
<text  x="19.34" y="335.5" ></text>
</g>
<g >
<title>wait_task_zombie (13 samples, 3.49%)</title><rect x="184.5" y="245" width="41.2" height="15.0" fill="rgb(221,201,0)" rx="2" ry="2" />
<text  x="187.46" y="255.5" >wai..</text>
</g>
<g >
<title>kvm_sched_clock_read (1 samples, 0.27%)</title><rect x="501.7" y="117" width="3.1" height="15.0" fill="rgb(249,38,27)" rx="2" ry="2" />
<text  x="504.67" y="127.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.27%)</title><rect x="476.3" y="165" width="3.2" height="15.0" fill="rgb(224,166,4)" rx="2" ry="2" />
<text  x="479.29" y="175.5" ></text>
</g>
<g >
<title>clear_page_erms (6 samples, 1.61%)</title><rect x="384.3" y="181" width="19.0" height="15.0" fill="rgb(226,211,38)" rx="2" ry="2" />
<text  x="387.30" y="191.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10 samples, 2.69%)</title><rect x="384.3" y="197" width="31.7" height="15.0" fill="rgb(235,222,22)" rx="2" ry="2" />
<text  x="387.30" y="207.5" >ge..</text>
</g>
<g >
<title>__perf_event_header_size.isra.0 (1 samples, 0.27%)</title><rect x="571.5" y="213" width="3.1" height="15.0" fill="rgb(235,148,52)" rx="2" ry="2" />
<text  x="574.45" y="223.5" ></text>
</g>
<g >
<title>security_prepare_creds (1 samples, 0.27%)</title><rect x="282.8" y="229" width="3.2" height="15.0" fill="rgb(246,118,3)" rx="2" ry="2" />
<text  x="285.80" y="239.5" ></text>
</g>
<g >
<title>perf_event__header_size (1 samples, 0.27%)</title><rect x="600.0" y="213" width="3.2" height="15.0" fill="rgb(232,229,32)" rx="2" ry="2" />
<text  x="603.00" y="223.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.27%)</title><rect x="339.9" y="229" width="3.2" height="15.0" fill="rgb(210,149,3)" rx="2" ry="2" />
<text  x="342.89" y="239.5" ></text>
</g>
<g >
<title>memset_erms (5 samples, 1.34%)</title><rect x="457.3" y="245" width="15.8" height="15.0" fill="rgb(221,90,38)" rx="2" ry="2" />
<text  x="460.26" y="255.5" ></text>
</g>
<g >
<title>do_sys_openat2 (1 samples, 0.27%)</title><rect x="1161.5" y="293" width="3.1" height="15.0" fill="rgb(213,174,13)" rx="2" ry="2" />
<text  x="1164.45" y="303.5" ></text>
</g>
<g >
<title>perf_swevent_init_hrtimer (1 samples, 0.27%)</title><rect x="929.9" y="165" width="3.2" height="15.0" fill="rgb(211,219,20)" rx="2" ry="2" />
<text  x="932.89" y="175.5" ></text>
</g>
<g >
<title>cpu_clock_event_init (1 samples, 0.27%)</title><rect x="929.9" y="181" width="3.2" height="15.0" fill="rgb(223,23,32)" rx="2" ry="2" />
<text  x="932.89" y="191.5" ></text>
</g>
<g >
<title>mutex_lock (8 samples, 2.15%)</title><rect x="574.6" y="213" width="25.4" height="15.0" fill="rgb(234,101,25)" rx="2" ry="2" />
<text  x="577.62" y="223.5" >m..</text>
</g>
<g >
<title>get_task_policy.part.0 (1 samples, 0.27%)</title><rect x="914.0" y="85" width="3.2" height="15.0" fill="rgb(232,94,10)" rx="2" ry="2" />
<text  x="917.03" y="95.5" ></text>
</g>
<g >
<title>alloc_slab_page (7 samples, 1.88%)</title><rect x="428.7" y="165" width="22.2" height="15.0" fill="rgb(223,109,51)" rx="2" ry="2" />
<text  x="431.71" y="175.5" >a..</text>
</g>
<g >
<title>__perf_event__output_id_sample (1 samples, 0.27%)</title><rect x="495.3" y="181" width="3.2" height="15.0" fill="rgb(247,83,42)" rx="2" ry="2" />
<text  x="498.32" y="191.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.27%)</title><rect x="479.5" y="261" width="3.1" height="15.0" fill="rgb(219,214,28)" rx="2" ry="2" />
<text  x="482.46" y="271.5" ></text>
</g>
<g >
<title>kernel_wait4 (65 samples, 17.47%)</title><rect x="19.5" y="293" width="206.2" height="15.0" fill="rgb(244,104,29)" rx="2" ry="2" />
<text  x="22.52" y="303.5" >kernel_wait4</text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.27%)</title><rect x="368.4" y="85" width="3.2" height="15.0" fill="rgb(218,228,53)" rx="2" ry="2" />
<text  x="371.44" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (1 samples, 0.27%)</title><rect x="1174.1" y="325" width="3.2" height="15.0" fill="rgb(228,48,52)" rx="2" ry="2" />
<text  x="1177.14" y="335.5" ></text>
</g>
<g >
<title>copy_namespaces (1 samples, 0.27%)</title><rect x="298.7" y="261" width="3.1" height="15.0" fill="rgb(254,87,1)" rx="2" ry="2" />
<text  x="301.66" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (67 samples, 18.01%)</title><rect x="13.2" y="357" width="212.5" height="15.0" fill="rgb(226,66,33)" rx="2" ry="2" />
<text  x="16.17" y="367.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>add_wait_queue (1 samples, 0.27%)</title><rect x="19.5" y="261" width="3.2" height="15.0" fill="rgb(249,113,47)" rx="2" ry="2" />
<text  x="22.52" y="271.5" ></text>
</g>
<g >
<title>memset_erms (4 samples, 1.08%)</title><rect x="917.2" y="197" width="12.7" height="15.0" fill="rgb(242,227,31)" rx="2" ry="2" />
<text  x="920.20" y="207.5" ></text>
</g>
<g >
<title>prepare_creds (2 samples, 0.54%)</title><rect x="279.6" y="245" width="6.4" height="15.0" fill="rgb(252,94,15)" rx="2" ry="2" />
<text  x="282.62" y="255.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (5 samples, 1.34%)</title><rect x="489.0" y="213" width="15.8" height="15.0" fill="rgb(239,105,14)" rx="2" ry="2" />
<text  x="491.98" y="223.5" ></text>
</g>
<g >
<title>cpu_clock_event_init (1 samples, 0.27%)</title><rect x="673.0" y="197" width="3.1" height="15.0" fill="rgb(215,69,42)" rx="2" ry="2" />
<text  x="675.96" y="207.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.27%)</title><rect x="1183.7" y="309" width="3.1" height="15.0" fill="rgb(238,212,20)" rx="2" ry="2" />
<text  x="1186.66" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_wait4 (65 samples, 17.47%)</title><rect x="19.5" y="325" width="206.2" height="15.0" fill="rgb(234,90,42)" rx="2" ry="2" />
<text  x="22.52" y="335.5" >__x64_sys_wait4</text>
</g>
<g >
<title>__x64_sys_openat (1 samples, 0.27%)</title><rect x="1161.5" y="325" width="3.1" height="15.0" fill="rgb(246,81,51)" rx="2" ry="2" />
<text  x="1164.45" y="335.5" ></text>
</g>
<g >
<title>new_slab (1 samples, 0.27%)</title><rect x="368.4" y="149" width="3.2" height="15.0" fill="rgb(245,52,19)" rx="2" ry="2" />
<text  x="371.44" y="159.5" ></text>
</g>
<g >
<title>perf_event_alloc (108 samples, 29.03%)</title><rect x="603.2" y="213" width="342.6" height="15.0" fill="rgb(222,44,37)" rx="2" ry="2" />
<text  x="606.17" y="223.5" >perf_event_alloc</text>
</g>
<g >
<title>alloc_pages_current (7 samples, 1.88%)</title><rect x="428.7" y="149" width="22.2" height="15.0" fill="rgb(214,93,16)" rx="2" ry="2" />
<text  x="431.71" y="159.5" >a..</text>
</g>
<g >
<title>___slab_alloc (74 samples, 19.89%)</title><rect x="682.5" y="165" width="234.7" height="15.0" fill="rgb(223,164,43)" rx="2" ry="2" />
<text  x="685.47" y="175.5" >___slab_alloc</text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.27%)</title><rect x="368.4" y="53" width="3.2" height="15.0" fill="rgb(253,127,5)" rx="2" ry="2" />
<text  x="371.44" y="63.5" ></text>
</g>
<g >
<title>sched_clock_cpu (2 samples, 0.54%)</title><rect x="498.5" y="165" width="6.3" height="15.0" fill="rgb(206,63,25)" rx="2" ry="2" />
<text  x="501.49" y="175.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.27%)</title><rect x="1183.7" y="277" width="3.1" height="15.0" fill="rgb(226,157,27)" rx="2" ry="2" />
<text  x="1186.66" y="287.5" ></text>
</g>
<g >
<title>__mutex_init (5 samples, 1.34%)</title><rect x="647.6" y="197" width="15.8" height="15.0" fill="rgb(240,162,41)" rx="2" ry="2" />
<text  x="650.58" y="207.5" ></text>
</g>
<g >
<title>inherit_event.isra.0 (138 samples, 37.10%)</title><rect x="514.4" y="229" width="437.7" height="15.0" fill="rgb(254,68,10)" rx="2" ry="2" />
<text  x="517.35" y="239.5" >inherit_event.isra.0</text>
</g>
<g >
<title>__srcu_read_unlock (1 samples, 0.27%)</title><rect x="669.8" y="197" width="3.2" height="15.0" fill="rgb(222,223,13)" rx="2" ry="2" />
<text  x="672.78" y="207.5" ></text>
</g>
<g >
<title>posix_get_realtime_timespec (1 samples, 0.27%)</title><rect x="1174.1" y="309" width="3.2" height="15.0" fill="rgb(226,13,26)" rx="2" ry="2" />
<text  x="1177.14" y="319.5" ></text>
</g>
<g >
<title>__sched_fork (3 samples, 0.81%)</title><rect x="977.5" y="245" width="9.5" height="15.0" fill="rgb(229,103,37)" rx="2" ry="2" />
<text  x="980.47" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (294 samples, 79.03%)</title><rect x="228.9" y="341" width="932.6" height="15.0" fill="rgb(242,143,43)" rx="2" ry="2" />
<text  x="231.87" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.27%)</title><rect x="22.7" y="261" width="3.2" height="15.0" fill="rgb(240,151,26)" rx="2" ry="2" />
<text  x="25.69" y="271.5" ></text>
</g>
<g >
<title>get_page_from_freelist (70 samples, 18.82%)</title><rect x="692.0" y="69" width="222.0" height="15.0" fill="rgb(233,16,24)" rx="2" ry="2" />
<text  x="694.99" y="79.5" >get_page_from_freelist</text>
</g>
<g >
<title>inherit_task_group.isra.0.part.0 (143 samples, 38.44%)</title><rect x="511.2" y="245" width="453.6" height="15.0" fill="rgb(218,43,19)" rx="2" ry="2" />
<text  x="514.18" y="255.5" >inherit_task_group.isra.0.part.0</text>
</g>
<g >
<title>do_syscall_64 (67 samples, 18.01%)</title><rect x="13.2" y="341" width="212.5" height="15.0" fill="rgb(208,89,28)" rx="2" ry="2" />
<text  x="16.17" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>my_clone (372 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(225,106,51)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >my_clone</text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.27%)</title><rect x="476.3" y="245" width="3.2" height="15.0" fill="rgb(231,122,49)" rx="2" ry="2" />
<text  x="479.29" y="255.5" ></text>
</g>
<g >
<title>___slab_alloc (8 samples, 2.15%)</title><rect x="425.5" y="213" width="25.4" height="15.0" fill="rgb(245,24,1)" rx="2" ry="2" />
<text  x="428.54" y="223.5" >_..</text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.27%)</title><rect x="279.6" y="229" width="3.2" height="15.0" fill="rgb(237,62,20)" rx="2" ry="2" />
<text  x="282.62" y="239.5" ></text>
</g>
<g >
<title>memcpy_erms (2 samples, 0.54%)</title><rect x="450.9" y="245" width="6.4" height="15.0" fill="rgb(224,148,50)" rx="2" ry="2" />
<text  x="453.91" y="255.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (3 samples, 0.81%)</title><rect x="333.5" y="245" width="9.6" height="15.0" fill="rgb(225,33,25)" rx="2" ry="2" />
<text  x="336.55" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.27%)</title><rect x="1161.5" y="357" width="3.1" height="15.0" fill="rgb(220,31,38)" rx="2" ry="2" />
<text  x="1164.45" y="367.5" ></text>
</g>
<g >
<title>__kmalloc (1 samples, 0.27%)</title><rect x="987.0" y="229" width="3.2" height="15.0" fill="rgb(222,30,44)" rx="2" ry="2" />
<text  x="989.99" y="239.5" ></text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.27%)</title><rect x="980.6" y="197" width="3.2" height="15.0" fill="rgb(245,13,14)" rx="2" ry="2" />
<text  x="983.65" y="207.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.27%)</title><rect x="501.7" y="133" width="3.1" height="15.0" fill="rgb(228,113,54)" rx="2" ry="2" />
<text  x="504.67" y="143.5" ></text>
</g>
<g >
<title>alloc_slab_page (1 samples, 0.27%)</title><rect x="476.3" y="181" width="3.2" height="15.0" fill="rgb(242,140,10)" rx="2" ry="2" />
<text  x="479.29" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.27%)</title><rect x="1183.7" y="373" width="3.1" height="15.0" fill="rgb(246,85,33)" rx="2" ry="2" />
<text  x="1186.66" y="383.5" ></text>
</g>
<g >
<title>task_active_pid_ns (1 samples, 0.27%)</title><rect x="948.9" y="213" width="3.2" height="15.0" fill="rgb(244,148,36)" rx="2" ry="2" />
<text  x="951.92" y="223.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.27%)</title><rect x="368.4" y="101" width="3.2" height="15.0" fill="rgb(242,13,22)" rx="2" ry="2" />
<text  x="371.44" y="111.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (4 samples, 1.08%)</title><rect x="1167.8" y="373" width="12.7" height="15.0" fill="rgb(223,88,26)" rx="2" ry="2" />
<text  x="1170.80" y="383.5" ></text>
</g>
<g >
<title>security_task_alloc (1 samples, 0.27%)</title><rect x="987.0" y="261" width="3.2" height="15.0" fill="rgb(225,11,32)" rx="2" ry="2" />
<text  x="989.99" y="271.5" ></text>
</g>
<g >
<title>lsm_task_alloc (1 samples, 0.27%)</title><rect x="987.0" y="245" width="3.2" height="15.0" fill="rgb(222,150,39)" rx="2" ry="2" />
<text  x="989.99" y="255.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.27%)</title><rect x="476.3" y="133" width="3.2" height="15.0" fill="rgb(216,151,0)" rx="2" ry="2" />
<text  x="479.29" y="143.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.27%)</title><rect x="244.7" y="229" width="3.2" height="15.0" fill="rgb(252,101,26)" rx="2" ry="2" />
<text  x="247.73" y="239.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (1 samples, 0.27%)</title><rect x="368.4" y="197" width="3.2" height="15.0" fill="rgb(224,195,30)" rx="2" ry="2" />
<text  x="371.44" y="207.5" ></text>
</g>
<g >
<title>init_cacheinfo (1 samples, 0.27%)</title><rect x="1186.8" y="389" width="3.2" height="15.0" fill="rgb(228,33,47)" rx="2" ry="2" />
<text  x="1189.83" y="399.5" ></text>
</g>
<g >
<title>new_slab (74 samples, 19.89%)</title><rect x="682.5" y="149" width="234.7" height="15.0" fill="rgb(226,161,11)" rx="2" ry="2" />
<text  x="685.47" y="159.5" >new_slab</text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.27%)</title><rect x="1183.7" y="229" width="3.1" height="15.0" fill="rgb(247,172,45)" rx="2" ry="2" />
<text  x="1186.66" y="239.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.27%)</title><rect x="501.7" y="101" width="3.1" height="15.0" fill="rgb(217,33,31)" rx="2" ry="2" />
<text  x="504.67" y="111.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (12 samples, 3.23%)</title><rect x="378.0" y="213" width="38.0" height="15.0" fill="rgb(219,39,3)" rx="2" ry="2" />
<text  x="380.96" y="223.5" >__a..</text>
</g>
<g >
<title>_cond_resched (1 samples, 0.27%)</title><rect x="1164.6" y="325" width="3.2" height="15.0" fill="rgb(250,135,20)" rx="2" ry="2" />
<text  x="1167.62" y="335.5" ></text>
</g>
<g >
<title>clear_page_erms (67 samples, 18.01%)</title><rect x="692.0" y="53" width="212.5" height="15.0" fill="rgb(243,77,13)" rx="2" ry="2" />
<text  x="694.99" y="63.5" >clear_page_erms</text>
</g>
<g >
<title>alloc_pages_current (13 samples, 3.49%)</title><rect x="374.8" y="229" width="41.2" height="15.0" fill="rgb(245,154,24)" rx="2" ry="2" />
<text  x="377.78" y="239.5" >all..</text>
</g>
<g >
<title>do_filp_open (1 samples, 0.27%)</title><rect x="1161.5" y="277" width="3.1" height="15.0" fill="rgb(245,138,44)" rx="2" ry="2" />
<text  x="1164.45" y="287.5" ></text>
</g>
<g >
<title>perf_event_init_task (146 samples, 39.25%)</title><rect x="504.8" y="261" width="463.2" height="15.0" fill="rgb(252,29,3)" rx="2" ry="2" />
<text  x="507.84" y="271.5" >perf_event_init_task</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.27%)</title><rect x="1161.5" y="341" width="3.1" height="15.0" fill="rgb(235,14,8)" rx="2" ry="2" />
<text  x="1164.45" y="351.5" ></text>
</g>
<g >
<title>task_nr_scan_windows (1 samples, 0.27%)</title><rect x="983.8" y="213" width="3.2" height="15.0" fill="rgb(216,212,16)" rx="2" ry="2" />
<text  x="986.82" y="223.5" ></text>
</g>
<g >
<title>___slab_alloc (1 samples, 0.27%)</title><rect x="368.4" y="165" width="3.2" height="15.0" fill="rgb(236,176,5)" rx="2" ry="2" />
<text  x="371.44" y="175.5" ></text>
</g>
<g >
<title>memset_erms (1 samples, 0.27%)</title><rect x="327.2" y="245" width="3.2" height="15.0" fill="rgb(228,72,7)" rx="2" ry="2" />
<text  x="330.20" y="255.5" ></text>
</g>
<g >
<title>pids_release (1 samples, 0.27%)</title><rect x="222.5" y="197" width="3.2" height="15.0" fill="rgb(237,169,27)" rx="2" ry="2" />
<text  x="225.53" y="207.5" ></text>
</g>
<g >
<title>_dl_map_object (1 samples, 0.27%)</title><rect x="1161.5" y="389" width="3.1" height="15.0" fill="rgb(225,179,7)" rx="2" ry="2" />
<text  x="1164.45" y="399.5" ></text>
</g>
<g >
<title>arch_dup_task_struct (2 samples, 0.54%)</title><rect x="416.0" y="245" width="6.4" height="15.0" fill="rgb(205,101,51)" rx="2" ry="2" />
<text  x="419.02" y="255.5" ></text>
</g>
<g >
<title>lockref_get (4 samples, 1.08%)</title><rect x="286.0" y="229" width="12.7" height="15.0" fill="rgb(215,73,21)" rx="2" ry="2" />
<text  x="288.97" y="239.5" ></text>
</g>
<g >
<title>__slab_alloc (74 samples, 19.89%)</title><rect x="682.5" y="181" width="234.7" height="15.0" fill="rgb(253,221,28)" rx="2" ry="2" />
<text  x="685.47" y="191.5" >__slab_alloc</text>
</g>
<g >
<title>mutex_lock (1 samples, 0.27%)</title><rect x="482.6" y="261" width="3.2" height="15.0" fill="rgb(252,82,38)" rx="2" ry="2" />
<text  x="485.63" y="271.5" ></text>
</g>
<g >
<title>schedule (50 samples, 13.44%)</title><rect x="25.9" y="261" width="158.6" height="15.0" fill="rgb(221,46,4)" rx="2" ry="2" />
<text  x="28.86" y="271.5" >schedule</text>
</g>
<g >
<title>sched_clock_local (2 samples, 0.54%)</title><rect x="498.5" y="149" width="6.3" height="15.0" fill="rgb(229,197,16)" rx="2" ry="2" />
<text  x="501.49" y="159.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.27%)</title><rect x="1183.7" y="325" width="3.1" height="15.0" fill="rgb(234,118,33)" rx="2" ry="2" />
<text  x="1186.66" y="335.5" ></text>
</g>
<g >
<title>perf_unpin_context (1 samples, 0.27%)</title><rect x="964.8" y="245" width="3.2" height="15.0" fill="rgb(235,189,50)" rx="2" ry="2" />
<text  x="967.78" y="255.5" ></text>
</g>
<g >
<title>page_poisoning_enabled (1 samples, 0.27%)</title><rect x="403.3" y="181" width="3.2" height="15.0" fill="rgb(215,140,22)" rx="2" ry="2" />
<text  x="406.33" y="191.5" ></text>
</g>
<g >
<title>allocate_slab (1 samples, 0.27%)</title><rect x="476.3" y="197" width="3.2" height="15.0" fill="rgb(221,31,20)" rx="2" ry="2" />
<text  x="479.29" y="207.5" ></text>
</g>
<g >
<title>memcpy_erms (1 samples, 0.27%)</title><rect x="324.0" y="245" width="3.2" height="15.0" fill="rgb(251,166,50)" rx="2" ry="2" />
<text  x="327.03" y="255.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (9 samples, 2.42%)</title><rect x="422.4" y="245" width="28.5" height="15.0" fill="rgb(207,69,23)" rx="2" ry="2" />
<text  x="425.37" y="255.5" >km..</text>
</g>
<g >
<title>__x64_sys_clone (294 samples, 79.03%)</title><rect x="228.9" y="325" width="932.6" height="15.0" fill="rgb(251,181,49)" rx="2" ry="2" />
<text  x="231.87" y="335.5" >__x64_sys_clone</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.27%)</title><rect x="1164.6" y="341" width="3.2" height="15.0" fill="rgb(220,143,40)" rx="2" ry="2" />
<text  x="1167.62" y="351.5" ></text>
</g>
<g >
<title>alloc_pid (4 samples, 1.08%)</title><rect x="251.1" y="261" width="12.7" height="15.0" fill="rgb(210,44,38)" rx="2" ry="2" />
<text  x="254.08" y="271.5" ></text>
</g>
<g >
<title>finish_task_switch (50 samples, 13.44%)</title><rect x="25.9" y="229" width="158.6" height="15.0" fill="rgb(236,43,31)" rx="2" ry="2" />
<text  x="28.86" y="239.5" >finish_task_switch</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.27%)</title><rect x="1164.6" y="357" width="3.2" height="15.0" fill="rgb(212,59,48)" rx="2" ry="2" />
<text  x="1167.62" y="367.5" ></text>
</g>
<g >
<title>cgroup_post_fork (4 samples, 1.08%)</title><rect x="266.9" y="261" width="12.7" height="15.0" fill="rgb(229,200,24)" rx="2" ry="2" />
<text  x="269.94" y="271.5" ></text>
</g>
<g >
<title>__lock_text_start (2 samples, 0.54%)</title><rect x="273.3" y="229" width="6.3" height="15.0" fill="rgb(248,123,36)" rx="2" ry="2" />
<text  x="276.28" y="239.5" ></text>
</g>
<g >
<title>link_path_walk.part.0 (1 samples, 0.27%)</title><rect x="1161.5" y="245" width="3.1" height="15.0" fill="rgb(211,148,29)" rx="2" ry="2" />
<text  x="1164.45" y="255.5" ></text>
</g>
<g >
<title>perf_try_init_event (3 samples, 0.81%)</title><rect x="929.9" y="197" width="9.5" height="15.0" fill="rgb(245,14,2)" rx="2" ry="2" />
<text  x="932.89" y="207.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.27%)</title><rect x="1183.7" y="261" width="3.1" height="15.0" fill="rgb(221,98,30)" rx="2" ry="2" />
<text  x="1186.66" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_trace (76 samples, 20.43%)</title><rect x="676.1" y="197" width="241.1" height="15.0" fill="rgb(205,71,12)" rx="2" ry="2" />
<text  x="679.13" y="207.5" >kmem_cache_alloc_trace</text>
</g>
<g >
<title>perf_event__id_header_size.isra.0 (1 samples, 0.27%)</title><rect x="961.6" y="229" width="3.2" height="15.0" fill="rgb(245,124,33)" rx="2" ry="2" />
<text  x="964.61" y="239.5" ></text>
</g>
<g >
<title>ktime_get_real_ts64 (1 samples, 0.27%)</title><rect x="1174.1" y="293" width="3.2" height="15.0" fill="rgb(250,177,26)" rx="2" ry="2" />
<text  x="1177.14" y="303.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.27%)</title><rect x="1164.6" y="373" width="3.2" height="15.0" fill="rgb(241,203,49)" rx="2" ry="2" />
<text  x="1167.62" y="383.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.27%)</title><rect x="926.7" y="181" width="3.2" height="15.0" fill="rgb(223,28,37)" rx="2" ry="2" />
<text  x="929.72" y="191.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="964.8" y="229" width="3.2" height="15.0" fill="rgb(217,95,40)" rx="2" ry="2" />
<text  x="967.78" y="239.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge (1 samples, 0.27%)</title><rect x="336.7" y="229" width="3.2" height="15.0" fill="rgb(208,222,27)" rx="2" ry="2" />
<text  x="339.72" y="239.5" ></text>
</g>
<g >
<title>__lock_text_start (54 samples, 14.52%)</title><rect x="990.2" y="261" width="171.3" height="15.0" fill="rgb(230,111,52)" rx="2" ry="2" />
<text  x="993.16" y="271.5" >__lock_text_start</text>
</g>
<g >
<title>__do_sys_clone (294 samples, 79.03%)</title><rect x="228.9" y="309" width="932.6" height="15.0" fill="rgb(235,105,48)" rx="2" ry="2" />
<text  x="231.87" y="319.5" >__do_sys_clone</text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.27%)</title><rect x="1183.7" y="357" width="3.1" height="15.0" fill="rgb(227,200,38)" rx="2" ry="2" />
<text  x="1186.66" y="367.5" ></text>
</g>
<g >
<title>__do_sys_wait4 (65 samples, 17.47%)</title><rect x="19.5" y="309" width="206.2" height="15.0" fill="rgb(240,51,33)" rx="2" ry="2" />
<text  x="22.52" y="319.5" >__do_sys_wait4</text>
</g>
<g >
<title>perf_event_task (6 samples, 1.61%)</title><rect x="485.8" y="245" width="19.0" height="15.0" fill="rgb(225,21,13)" rx="2" ry="2" />
<text  x="488.81" y="255.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.27%)</title><rect x="406.5" y="181" width="3.2" height="15.0" fill="rgb(238,184,44)" rx="2" ry="2" />
<text  x="409.51" y="191.5" ></text>
</g>
<g >
<title>rb_next (3 samples, 0.81%)</title><rect x="968.0" y="261" width="9.5" height="15.0" fill="rgb(228,156,8)" rx="2" ry="2" />
<text  x="970.96" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node_trace (1 samples, 0.27%)</title><rect x="371.6" y="213" width="3.2" height="15.0" fill="rgb(244,186,44)" rx="2" ry="2" />
<text  x="374.61" y="223.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.27%)</title><rect x="476.3" y="117" width="3.2" height="15.0" fill="rgb(238,158,22)" rx="2" ry="2" />
<text  x="479.29" y="127.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (4 samples, 1.08%)</title><rect x="1167.8" y="389" width="12.7" height="15.0" fill="rgb(254,66,46)" rx="2" ry="2" />
<text  x="1170.80" y="399.5" ></text>
</g>
<g >
<title>alloc_slab_page (1 samples, 0.27%)</title><rect x="368.4" y="117" width="3.2" height="15.0" fill="rgb(234,131,49)" rx="2" ry="2" />
<text  x="371.44" y="127.5" ></text>
</g>
<g >
<title>__get_vm_area_node (9 samples, 2.42%)</title><rect x="346.2" y="229" width="28.6" height="15.0" fill="rgb(245,131,3)" rx="2" ry="2" />
<text  x="349.24" y="239.5" >__..</text>
</g>
<g >
<title>perf_event_fork (6 samples, 1.61%)</title><rect x="485.8" y="261" width="19.0" height="15.0" fill="rgb(230,82,33)" rx="2" ry="2" />
<text  x="488.81" y="271.5" ></text>
</g>
<g >
<title>perf_swevent_init_hrtimer (2 samples, 0.54%)</title><rect x="933.1" y="181" width="6.3" height="15.0" fill="rgb(216,165,3)" rx="2" ry="2" />
<text  x="936.06" y="191.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.27%)</title><rect x="1174.1" y="277" width="3.2" height="15.0" fill="rgb(218,19,44)" rx="2" ry="2" />
<text  x="1177.14" y="287.5" ></text>
</g>
<g >
<title>wake_up_new_task (54 samples, 14.52%)</title><rect x="990.2" y="277" width="171.3" height="15.0" fill="rgb(253,106,11)" rx="2" ry="2" />
<text  x="993.16" y="287.5" >wake_up_new_task</text>
</g>
<g >
<title>release_task (13 samples, 3.49%)</title><rect x="184.5" y="229" width="41.2" height="15.0" fill="rgb(206,155,42)" rx="2" ry="2" />
<text  x="187.46" y="239.5" >rel..</text>
</g>
<g >
<title>__GI___wait4 (68 samples, 18.28%)</title><rect x="10.0" y="373" width="215.7" height="15.0" fill="rgb(230,162,3)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >__GI___wait4</text>
</g>
<g >
<title>get_page_from_freelist (7 samples, 1.88%)</title><rect x="428.7" y="117" width="22.2" height="15.0" fill="rgb(246,173,18)" rx="2" ry="2" />
<text  x="431.71" y="127.5" >g..</text>
</g>
<g >
<title>__slab_alloc (9 samples, 2.42%)</title><rect x="422.4" y="229" width="28.5" height="15.0" fill="rgb(205,133,9)" rx="2" ry="2" />
<text  x="425.37" y="239.5" >__..</text>
</g>
<g >
<title>do_sys_open (1 samples, 0.27%)</title><rect x="1161.5" y="309" width="3.1" height="15.0" fill="rgb(236,132,39)" rx="2" ry="2" />
<text  x="1164.45" y="319.5" ></text>
</g>
<g >
<title>cgroup_can_fork (1 samples, 0.27%)</title><rect x="228.9" y="277" width="3.1" height="15.0" fill="rgb(206,125,47)" rx="2" ry="2" />
<text  x="231.87" y="287.5" ></text>
</g>
<g >
<title>kvm_sched_clock_read (1 samples, 0.27%)</title><rect x="498.5" y="133" width="3.2" height="15.0" fill="rgb(254,78,5)" rx="2" ry="2" />
<text  x="501.49" y="143.5" ></text>
</g>
<g >
<title>___slab_alloc (1 samples, 0.27%)</title><rect x="476.3" y="229" width="3.2" height="15.0" fill="rgb(240,128,15)" rx="2" ry="2" />
<text  x="479.29" y="239.5" ></text>
</g>
<g >
<title>init_numa_balancing (1 samples, 0.27%)</title><rect x="983.8" y="229" width="3.2" height="15.0" fill="rgb(251,115,28)" rx="2" ry="2" />
<text  x="986.82" y="239.5" ></text>
</g>
<g >
<title>prep_compound_page (1 samples, 0.27%)</title><rect x="904.5" y="37" width="3.2" height="15.0" fill="rgb(214,100,8)" rx="2" ry="2" />
<text  x="907.52" y="47.5" ></text>
</g>
<g >
<title>allocate_slab (8 samples, 2.15%)</title><rect x="425.5" y="181" width="25.4" height="15.0" fill="rgb(247,145,41)" rx="2" ry="2" />
<text  x="428.54" y="191.5" >a..</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.27%)</title><rect x="368.4" y="69" width="3.2" height="15.0" fill="rgb(219,64,31)" rx="2" ry="2" />
<text  x="371.44" y="79.5" ></text>
</g>
<g >
<title>new_slab (8 samples, 2.15%)</title><rect x="425.5" y="197" width="25.4" height="15.0" fill="rgb(254,21,26)" rx="2" ry="2" />
<text  x="428.54" y="207.5" >n..</text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.27%)</title><rect x="368.4" y="181" width="3.2" height="15.0" fill="rgb(227,111,22)" rx="2" ry="2" />
<text  x="371.44" y="191.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.27%)</title><rect x="320.9" y="245" width="3.1" height="15.0" fill="rgb(232,206,47)" rx="2" ry="2" />
<text  x="323.86" y="255.5" ></text>
</g>
<g >
<title>alloc_pages_current (71 samples, 19.09%)</title><rect x="692.0" y="101" width="225.2" height="15.0" fill="rgb(232,62,28)" rx="2" ry="2" />
<text  x="694.99" y="111.5" >alloc_pages_current</text>
</g>
<g >
<title>__alloc_pages_nodemask (70 samples, 18.82%)</title><rect x="692.0" y="85" width="222.0" height="15.0" fill="rgb(250,97,37)" rx="2" ry="2" />
<text  x="694.99" y="95.5" >__alloc_pages_nodemask</text>
</g>
<g >
<title>hrtimer_init (2 samples, 0.54%)</title><rect x="977.5" y="213" width="6.3" height="15.0" fill="rgb(238,81,45)" rx="2" ry="2" />
<text  x="980.47" y="223.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.27%)</title><rect x="476.3" y="261" width="3.2" height="15.0" fill="rgb(214,67,32)" rx="2" ry="2" />
<text  x="479.29" y="271.5" ></text>
</g>
<g >
<title>security_perf_event_alloc (1 samples, 0.27%)</title><rect x="945.8" y="213" width="3.1" height="15.0" fill="rgb(208,41,22)" rx="2" ry="2" />
<text  x="948.75" y="223.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.27%)</title><rect x="244.7" y="245" width="3.2" height="15.0" fill="rgb(239,41,43)" rx="2" ry="2" />
<text  x="247.73" y="255.5" ></text>
</g>
<g >
<title>cgroup_release (4 samples, 1.08%)</title><rect x="213.0" y="213" width="12.7" height="15.0" fill="rgb(254,109,24)" rx="2" ry="2" />
<text  x="216.01" y="223.5" ></text>
</g>
<g >
<title>fpu__copy (1 samples, 0.27%)</title><rect x="419.2" y="229" width="3.2" height="15.0" fill="rgb(237,121,45)" rx="2" ry="2" />
<text  x="422.19" y="239.5" ></text>
</g>
<g >
<title>posix_get_realtime_timespec (1 samples, 0.27%)</title><rect x="1177.3" y="325" width="3.2" height="15.0" fill="rgb(248,51,9)" rx="2" ry="2" />
<text  x="1180.31" y="335.5" ></text>
</g>
<g >
<title>pids_cancel.constprop.0 (1 samples, 0.27%)</title><rect x="219.4" y="197" width="3.1" height="15.0" fill="rgb(215,13,23)" rx="2" ry="2" />
<text  x="222.35" y="207.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.27%)</title><rect x="1180.5" y="389" width="3.2" height="15.0" fill="rgb(240,9,42)" rx="2" ry="2" />
<text  x="1183.48" y="399.5" ></text>
</g>
<g >
<title>allocate_slab (1 samples, 0.27%)</title><rect x="368.4" y="133" width="3.2" height="15.0" fill="rgb(249,172,32)" rx="2" ry="2" />
<text  x="371.44" y="143.5" ></text>
</g>
<g >
<title>hrtimer_init (1 samples, 0.27%)</title><rect x="473.1" y="261" width="3.2" height="15.0" fill="rgb(236,223,31)" rx="2" ry="2" />
<text  x="476.12" y="271.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.27%)</title><rect x="320.9" y="229" width="3.1" height="15.0" fill="rgb(229,123,22)" rx="2" ry="2" />
<text  x="323.86" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.27%)</title><rect x="926.7" y="165" width="3.2" height="15.0" fill="rgb(212,2,53)" rx="2" ry="2" />
<text  x="929.72" y="175.5" ></text>
</g>
<g >
<title>clear_page_erms (7 samples, 1.88%)</title><rect x="428.7" y="101" width="22.2" height="15.0" fill="rgb(224,84,35)" rx="2" ry="2" />
<text  x="431.71" y="111.5" >c..</text>
</g>
<g >
<title>alloc_vmap_area (8 samples, 2.15%)</title><rect x="346.2" y="213" width="25.4" height="15.0" fill="rgb(205,142,32)" rx="2" ry="2" />
<text  x="349.24" y="223.5" >a..</text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.27%)</title><rect x="416.0" y="229" width="3.2" height="15.0" fill="rgb(252,40,54)" rx="2" ry="2" />
<text  x="419.02" y="239.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.27%)</title><rect x="926.7" y="149" width="3.2" height="15.0" fill="rgb(219,96,7)" rx="2" ry="2" />
<text  x="929.72" y="159.5" ></text>
</g>
<g >
<title>__schedule (50 samples, 13.44%)</title><rect x="25.9" y="245" width="158.6" height="15.0" fill="rgb(229,148,37)" rx="2" ry="2" />
<text  x="28.86" y="255.5" >__schedule</text>
</g>
<g >
<title>inherit_event.isra.0 (1 samples, 0.27%)</title><rect x="508.0" y="245" width="3.2" height="15.0" fill="rgb(215,113,33)" rx="2" ry="2" />
<text  x="511.01" y="255.5" ></text>
</g>
<g >
<title>new_slab (1 samples, 0.27%)</title><rect x="476.3" y="213" width="3.2" height="15.0" fill="rgb(254,95,33)" rx="2" ry="2" />
<text  x="479.29" y="223.5" ></text>
</g>
<g >
<title>_do_fork (294 samples, 79.03%)</title><rect x="228.9" y="293" width="932.6" height="15.0" fill="rgb(206,66,34)" rx="2" ry="2" />
<text  x="231.87" y="303.5" >_do_fork</text>
</g>
<g >
<title>dup_task_struct (45 samples, 12.10%)</title><rect x="330.4" y="261" width="142.7" height="15.0" fill="rgb(230,82,41)" rx="2" ry="2" />
<text  x="333.38" y="271.5" >dup_task_struct</text>
</g>
<g >
<title>cpuset_fork (2 samples, 0.54%)</title><rect x="305.0" y="261" width="6.3" height="15.0" fill="rgb(250,83,46)" rx="2" ry="2" />
<text  x="308.00" y="271.5" ></text>
</g>
<g >
<title>wait_consider_task (13 samples, 3.49%)</title><rect x="184.5" y="261" width="41.2" height="15.0" fill="rgb(250,184,7)" rx="2" ry="2" />
<text  x="187.46" y="271.5" >wai..</text>
</g>
<g >
<title>sched_fork (3 samples, 0.81%)</title><rect x="977.5" y="261" width="9.5" height="15.0" fill="rgb(248,142,3)" rx="2" ry="2" />
<text  x="980.47" y="271.5" ></text>
</g>
<g >
<title>rmqueue (2 samples, 0.54%)</title><rect x="907.7" y="53" width="6.3" height="15.0" fill="rgb(233,110,29)" rx="2" ry="2" />
<text  x="910.69" y="63.5" ></text>
</g>
<g >
<title>cpu_cgroup_fork (2 samples, 0.54%)</title><rect x="273.3" y="245" width="6.3" height="15.0" fill="rgb(254,1,51)" rx="2" ry="2" />
<text  x="276.28" y="255.5" ></text>
</g>
<g >
<title>__delayacct_tsk_init (1 samples, 0.27%)</title><rect x="244.7" y="261" width="3.2" height="15.0" fill="rgb(215,140,14)" rx="2" ry="2" />
<text  x="247.73" y="271.5" ></text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.27%)</title><rect x="473.1" y="245" width="3.2" height="15.0" fill="rgb(234,38,52)" rx="2" ry="2" />
<text  x="476.12" y="255.5" ></text>
</g>
<g >
<title>dup_fd (6 samples, 1.61%)</title><rect x="311.3" y="261" width="19.1" height="15.0" fill="rgb(215,188,36)" rx="2" ry="2" />
<text  x="314.34" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.81%)</title><rect x="1171.0" y="357" width="9.5" height="15.0" fill="rgb(208,25,40)" rx="2" ry="2" />
<text  x="1173.97" y="367.5" ></text>
</g>
<g >
<title>__mutex_init (2 samples, 0.54%)</title><rect x="565.1" y="213" width="6.4" height="15.0" fill="rgb(244,124,47)" rx="2" ry="2" />
<text  x="568.11" y="223.5" ></text>
</g>
<g >
<title>perf_iterate_sb (6 samples, 1.61%)</title><rect x="485.8" y="229" width="19.0" height="15.0" fill="rgb(214,190,50)" rx="2" ry="2" />
<text  x="488.81" y="239.5" ></text>
</g>
<g >
<title>local_clock (2 samples, 0.54%)</title><rect x="498.5" y="181" width="6.3" height="15.0" fill="rgb(237,135,16)" rx="2" ry="2" />
<text  x="501.49" y="191.5" ></text>
</g>
<g >
<title>copy_creds (2 samples, 0.54%)</title><rect x="279.6" y="261" width="6.4" height="15.0" fill="rgb(207,124,34)" rx="2" ry="2" />
<text  x="282.62" y="271.5" ></text>
</g>
<g >
<title>__srcu_read_lock (2 samples, 0.54%)</title><rect x="663.4" y="197" width="6.4" height="15.0" fill="rgb(235,126,15)" rx="2" ry="2" />
<text  x="666.44" y="207.5" ></text>
</g>
<g >
<title>apparmor_cred_prepare (1 samples, 0.27%)</title><rect x="282.8" y="213" width="3.2" height="15.0" fill="rgb(244,180,42)" rx="2" ry="2" />
<text  x="285.80" y="223.5" ></text>
</g>
<g >
<title>_start (1 samples, 0.27%)</title><rect x="1164.6" y="389" width="3.2" height="15.0" fill="rgb(207,47,41)" rx="2" ry="2" />
<text  x="1167.62" y="399.5" ></text>
</g>
<g >
<title>rmqueue (2 samples, 0.54%)</title><rect x="409.7" y="181" width="6.3" height="15.0" fill="rgb(245,135,5)" rx="2" ry="2" />
<text  x="412.68" y="191.5" ></text>
</g>
<g >
<title>__GI___open64_nocancel (1 samples, 0.27%)</title><rect x="1161.5" y="373" width="3.1" height="15.0" fill="rgb(244,225,15)" rx="2" ry="2" />
<text  x="1164.45" y="383.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.27%)</title><rect x="926.7" y="101" width="3.2" height="15.0" fill="rgb(230,61,28)" rx="2" ry="2" />
<text  x="929.72" y="111.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.27%)</title><rect x="1183.7" y="341" width="3.1" height="15.0" fill="rgb(235,142,44)" rx="2" ry="2" />
<text  x="1186.66" y="351.5" ></text>
</g>
<g >
<title>alloc_slab_page (71 samples, 19.09%)</title><rect x="692.0" y="117" width="225.2" height="15.0" fill="rgb(252,224,17)" rx="2" ry="2" />
<text  x="694.99" y="127.5" >alloc_slab_page</text>
</g>
<g >
<title>init_dl_inactive_task_timer (2 samples, 0.54%)</title><rect x="977.5" y="229" width="6.3" height="15.0" fill="rgb(227,211,44)" rx="2" ry="2" />
<text  x="980.47" y="239.5" ></text>
</g>
<g >
<title>do_wait (65 samples, 17.47%)</title><rect x="19.5" y="277" width="206.2" height="15.0" fill="rgb(251,180,47)" rx="2" ry="2" />
<text  x="22.52" y="287.5" >do_wait</text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.81%)</title><rect x="1171.0" y="341" width="9.5" height="15.0" fill="rgb(215,208,48)" rx="2" ry="2" />
<text  x="1173.97" y="351.5" ></text>
</g>
</g>
</svg>
