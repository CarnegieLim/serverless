<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>perf_pin_task_context (1 samples, 0.26%)</title><rect x="985.1" y="229" width="3.1" height="15.0" fill="rgb(206,184,37)" rx="2" ry="2" />
<text  x="988.05" y="239.5" ></text>
</g>
<g >
<title>__mutex_init (2 samples, 0.53%)</title><rect x="683.8" y="197" width="6.3" height="15.0" fill="rgb(237,175,49)" rx="2" ry="2" />
<text  x="686.84" y="207.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.26%)</title><rect x="31.7" y="229" width="3.1" height="15.0" fill="rgb(220,32,47)" rx="2" ry="2" />
<text  x="34.74" y="239.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.26%)</title><rect x="1168.3" y="261" width="3.1" height="15.0" fill="rgb(207,154,46)" rx="2" ry="2" />
<text  x="1171.26" y="271.5" ></text>
</g>
<g >
<title>get_page_from_freelist (65 samples, 17.11%)</title><rect x="733.5" y="53" width="201.9" height="15.0" fill="rgb(235,144,37)" rx="2" ry="2" />
<text  x="736.53" y="63.5" >get_page_from_freelist</text>
</g>
<g >
<title>get_common_indices.constprop.0 (1 samples, 0.26%)</title><rect x="13.1" y="357" width="3.1" height="15.0" fill="rgb(217,89,48)" rx="2" ry="2" />
<text  x="16.11" y="367.5" ></text>
</g>
<g >
<title>alloc_pages_current (65 samples, 17.11%)</title><rect x="733.5" y="85" width="201.9" height="15.0" fill="rgb(254,109,5)" rx="2" ry="2" />
<text  x="736.53" y="95.5" >alloc_pages_current</text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.26%)</title><rect x="1180.7" y="229" width="3.1" height="15.0" fill="rgb(231,138,27)" rx="2" ry="2" />
<text  x="1183.68" y="239.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.26%)</title><rect x="388.8" y="229" width="3.1" height="15.0" fill="rgb(231,19,50)" rx="2" ry="2" />
<text  x="391.84" y="239.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (13 samples, 3.42%)</title><rect x="444.7" y="197" width="40.4" height="15.0" fill="rgb(228,194,8)" rx="2" ry="2" />
<text  x="447.74" y="207.5" >__a..</text>
</g>
<g >
<title>perf_event_fork (8 samples, 2.11%)</title><rect x="568.9" y="245" width="24.9" height="15.0" fill="rgb(220,48,13)" rx="2" ry="2" />
<text  x="571.95" y="255.5" >p..</text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.26%)</title><rect x="485.1" y="213" width="3.1" height="15.0" fill="rgb(236,187,31)" rx="2" ry="2" />
<text  x="488.11" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="1186.9" y="357" width="3.1" height="15.0" fill="rgb(254,155,4)" rx="2" ry="2" />
<text  x="1189.89" y="367.5" ></text>
</g>
<g >
<title>hrtimer_init (3 samples, 0.79%)</title><rect x="550.3" y="245" width="9.3" height="15.0" fill="rgb(205,112,34)" rx="2" ry="2" />
<text  x="553.32" y="255.5" ></text>
</g>
<g >
<title>put_pid.part.0 (1 samples, 0.26%)</title><rect x="348.5" y="101" width="3.1" height="15.0" fill="rgb(238,86,39)" rx="2" ry="2" />
<text  x="351.47" y="111.5" ></text>
</g>
<g >
<title>put_task_struct_rcu_user (4 samples, 1.05%)</title><rect x="286.4" y="197" width="12.4" height="15.0" fill="rgb(242,124,41)" rx="2" ry="2" />
<text  x="289.37" y="207.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (1 samples, 0.26%)</title><rect x="1180.7" y="197" width="3.1" height="15.0" fill="rgb(214,48,18)" rx="2" ry="2" />
<text  x="1183.68" y="207.5" ></text>
</g>
<g >
<title>alloc_pid (2 samples, 0.53%)</title><rect x="339.2" y="245" width="6.2" height="15.0" fill="rgb(215,62,30)" rx="2" ry="2" />
<text  x="342.16" y="255.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (1 samples, 0.26%)</title><rect x="1180.7" y="149" width="3.1" height="15.0" fill="rgb(252,37,39)" rx="2" ry="2" />
<text  x="1183.68" y="159.5" ></text>
</g>
<g >
<title>allocate_slab (8 samples, 2.11%)</title><rect x="488.2" y="165" width="24.9" height="15.0" fill="rgb(236,80,42)" rx="2" ry="2" />
<text  x="491.21" y="175.5" >a..</text>
</g>
<g >
<title>new_slab (68 samples, 17.89%)</title><rect x="727.3" y="133" width="211.2" height="15.0" fill="rgb(234,77,6)" rx="2" ry="2" />
<text  x="730.32" y="143.5" >new_slab</text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.26%)</title><rect x="336.1" y="213" width="3.1" height="15.0" fill="rgb(231,197,43)" rx="2" ry="2" />
<text  x="339.05" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.26%)</title><rect x="1180.7" y="341" width="3.1" height="15.0" fill="rgb(253,107,35)" rx="2" ry="2" />
<text  x="1183.68" y="351.5" ></text>
</g>
<g >
<title>__lock_text_start (47 samples, 12.37%)</title><rect x="1013.0" y="245" width="145.9" height="15.0" fill="rgb(205,71,10)" rx="2" ry="2" />
<text  x="1016.00" y="255.5" >__lock_text_start</text>
</g>
<g >
<title>__perf_event_header__init_id.isra.0 (1 samples, 0.26%)</title><rect x="587.6" y="165" width="3.1" height="15.0" fill="rgb(224,23,2)" rx="2" ry="2" />
<text  x="590.58" y="175.5" ></text>
</g>
<g >
<title>__get_vm_area_node (8 samples, 2.11%)</title><rect x="416.8" y="213" width="24.8" height="15.0" fill="rgb(253,227,48)" rx="2" ry="2" />
<text  x="419.79" y="223.5" >_..</text>
</g>
<g >
<title>get_random_u32 (1 samples, 0.26%)</title><rect x="935.4" y="101" width="3.1" height="15.0" fill="rgb(227,113,33)" rx="2" ry="2" />
<text  x="938.37" y="111.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.26%)</title><rect x="1168.3" y="325" width="3.1" height="15.0" fill="rgb(250,72,2)" rx="2" ry="2" />
<text  x="1171.26" y="335.5" ></text>
</g>
<g >
<title>add_wait_queue (1 samples, 0.26%)</title><rect x="28.6" y="245" width="3.1" height="15.0" fill="rgb(250,53,2)" rx="2" ry="2" />
<text  x="31.63" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_wait4 (1 samples, 0.26%)</title><rect x="19.3" y="325" width="3.1" height="15.0" fill="rgb(207,86,26)" rx="2" ry="2" />
<text  x="22.32" y="335.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.26%)</title><rect x="1186.9" y="309" width="3.1" height="15.0" fill="rgb(237,228,38)" rx="2" ry="2" />
<text  x="1189.89" y="319.5" ></text>
</g>
<g >
<title>mutex_lock (1 samples, 0.26%)</title><rect x="693.2" y="197" width="3.1" height="15.0" fill="rgb(206,28,5)" rx="2" ry="2" />
<text  x="696.16" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="1180.7" y="373" width="3.1" height="15.0" fill="rgb(211,9,50)" rx="2" ry="2" />
<text  x="1183.68" y="383.5" ></text>
</g>
<g >
<title>__srcu_read_unlock (1 samples, 0.26%)</title><rect x="690.1" y="197" width="3.1" height="15.0" fill="rgb(250,105,25)" rx="2" ry="2" />
<text  x="693.05" y="207.5" ></text>
</g>
<g >
<title>rcu_core_si (1 samples, 0.26%)</title><rect x="348.5" y="149" width="3.1" height="15.0" fill="rgb(251,83,37)" rx="2" ry="2" />
<text  x="351.47" y="159.5" ></text>
</g>
<g >
<title>copy_process (223 samples, 58.68%)</title><rect x="320.5" y="261" width="692.5" height="15.0" fill="rgb(229,183,49)" rx="2" ry="2" />
<text  x="323.53" y="271.5" >copy_process</text>
</g>
<g >
<title>__lock_text_start (3 samples, 0.79%)</title><rect x="997.5" y="229" width="9.3" height="15.0" fill="rgb(214,159,37)" rx="2" ry="2" />
<text  x="1000.47" y="239.5" ></text>
</g>
<g >
<title>perf_event_task_output (3 samples, 0.79%)</title><rect x="584.5" y="181" width="9.3" height="15.0" fill="rgb(218,125,2)" rx="2" ry="2" />
<text  x="587.47" y="191.5" ></text>
</g>
<g >
<title>__vmalloc_node_range (22 samples, 5.79%)</title><rect x="416.8" y="229" width="68.3" height="15.0" fill="rgb(251,228,16)" rx="2" ry="2" />
<text  x="419.79" y="239.5" >__vmall..</text>
</g>
<g >
<title>rb_next (2 samples, 0.53%)</title><rect x="991.3" y="245" width="6.2" height="15.0" fill="rgb(236,100,25)" rx="2" ry="2" />
<text  x="994.26" y="255.5" ></text>
</g>
<g >
<title>dup_task_struct (49 samples, 12.89%)</title><rect x="395.1" y="245" width="152.1" height="15.0" fill="rgb(223,110,26)" rx="2" ry="2" />
<text  x="398.05" y="255.5" >dup_task_struct</text>
</g>
<g >
<title>perf_iterate_sb (8 samples, 2.11%)</title><rect x="568.9" y="213" width="24.9" height="15.0" fill="rgb(219,188,17)" rx="2" ry="2" />
<text  x="571.95" y="223.5" >p..</text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.26%)</title><rect x="1009.9" y="197" width="3.1" height="15.0" fill="rgb(230,72,2)" rx="2" ry="2" />
<text  x="1012.89" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.26%)</title><rect x="1186.9" y="325" width="3.1" height="15.0" fill="rgb(216,157,25)" rx="2" ry="2" />
<text  x="1189.89" y="335.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.26%)</title><rect x="559.6" y="197" width="3.1" height="15.0" fill="rgb(207,101,22)" rx="2" ry="2" />
<text  x="562.63" y="207.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (4 samples, 1.05%)</title><rect x="364.0" y="213" width="12.4" height="15.0" fill="rgb(240,22,1)" rx="2" ry="2" />
<text  x="367.00" y="223.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (7 samples, 1.84%)</title><rect x="572.1" y="197" width="21.7" height="15.0" fill="rgb(215,218,23)" rx="2" ry="2" />
<text  x="575.05" y="207.5" >p..</text>
</g>
<g >
<title>do_wait (88 samples, 23.16%)</title><rect x="25.5" y="261" width="273.3" height="15.0" fill="rgb(236,167,27)" rx="2" ry="2" />
<text  x="28.53" y="271.5" >do_wait</text>
</g>
<g >
<title>rb_first (1 samples, 0.26%)</title><rect x="988.2" y="245" width="3.1" height="15.0" fill="rgb(225,21,41)" rx="2" ry="2" />
<text  x="991.16" y="255.5" ></text>
</g>
<g >
<title>__slab_alloc (8 samples, 2.11%)</title><rect x="488.2" y="213" width="24.9" height="15.0" fill="rgb(206,22,46)" rx="2" ry="2" />
<text  x="491.21" y="223.5" >_..</text>
</g>
<g >
<title>_do_fork (271 samples, 71.32%)</title><rect x="317.4" y="277" width="841.5" height="15.0" fill="rgb(244,61,14)" rx="2" ry="2" />
<text  x="320.42" y="287.5" >_do_fork</text>
</g>
<g >
<title>__libc_start_main (368 samples, 96.84%)</title><rect x="16.2" y="373" width="1142.7" height="15.0" fill="rgb(251,6,38)" rx="2" ry="2" />
<text  x="19.21" y="383.5" >__libc_start_main</text>
</g>
<g >
<title>mmput (1 samples, 0.26%)</title><rect x="1180.7" y="293" width="3.1" height="15.0" fill="rgb(235,10,35)" rx="2" ry="2" />
<text  x="1183.68" y="303.5" ></text>
</g>
<g >
<title>__delayacct_tsk_init (1 samples, 0.26%)</title><rect x="336.1" y="245" width="3.1" height="15.0" fill="rgb(219,143,15)" rx="2" ry="2" />
<text  x="339.05" y="255.5" ></text>
</g>
<g >
<title>lockref_get (2 samples, 0.53%)</title><rect x="376.4" y="213" width="6.2" height="15.0" fill="rgb(247,118,36)" rx="2" ry="2" />
<text  x="379.42" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.79%)</title><rect x="1171.4" y="341" width="9.3" height="15.0" fill="rgb(207,161,10)" rx="2" ry="2" />
<text  x="1174.37" y="351.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.26%)</title><rect x="1180.7" y="277" width="3.1" height="15.0" fill="rgb(247,132,42)" rx="2" ry="2" />
<text  x="1183.68" y="287.5" ></text>
</g>
<g >
<title>page_counter_try_charge (5 samples, 1.32%)</title><rect x="398.2" y="197" width="15.5" height="15.0" fill="rgb(219,38,54)" rx="2" ry="2" />
<text  x="401.16" y="207.5" ></text>
</g>
<g >
<title>insert_vmap_area.constprop.0 (2 samples, 0.53%)</title><rect x="432.3" y="181" width="6.2" height="15.0" fill="rgb(253,214,46)" rx="2" ry="2" />
<text  x="435.32" y="191.5" ></text>
</g>
<g >
<title>kvm_sched_clock_read (1 samples, 0.26%)</title><rect x="587.6" y="101" width="3.1" height="15.0" fill="rgb(253,82,36)" rx="2" ry="2" />
<text  x="590.58" y="111.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (65 samples, 17.11%)</title><rect x="733.5" y="69" width="201.9" height="15.0" fill="rgb(207,174,3)" rx="2" ry="2" />
<text  x="736.53" y="79.5" >__alloc_pages_nodemask</text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.26%)</title><rect x="31.7" y="245" width="3.1" height="15.0" fill="rgb(207,216,15)" rx="2" ry="2" />
<text  x="34.74" y="255.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (2 samples, 0.53%)</title><rect x="1174.5" y="245" width="6.2" height="15.0" fill="rgb(247,20,19)" rx="2" ry="2" />
<text  x="1177.47" y="255.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.26%)</title><rect x="10.0" y="357" width="3.1" height="15.0" fill="rgb(237,188,53)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>rmqueue (4 samples, 1.05%)</title><rect x="472.7" y="165" width="12.4" height="15.0" fill="rgb(243,172,1)" rx="2" ry="2" />
<text  x="475.68" y="175.5" ></text>
</g>
<g >
<title>task_scan_max (1 samples, 0.26%)</title><rect x="1006.8" y="197" width="3.1" height="15.0" fill="rgb(217,62,29)" rx="2" ry="2" />
<text  x="1009.79" y="207.5" ></text>
</g>
<g >
<title>__srcu_read_unlock (1 samples, 0.26%)</title><rect x="721.1" y="181" width="3.1" height="15.0" fill="rgb(250,91,5)" rx="2" ry="2" />
<text  x="724.11" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (90 samples, 23.68%)</title><rect x="19.3" y="341" width="279.5" height="15.0" fill="rgb(210,178,50)" rx="2" ry="2" />
<text  x="22.32" y="351.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>inherit_task_group.isra.0.part.0 (124 samples, 32.63%)</title><rect x="600.0" y="229" width="385.1" height="15.0" fill="rgb(228,114,35)" rx="2" ry="2" />
<text  x="603.00" y="239.5" >inherit_task_group.isra.0.part.0</text>
</g>
<g >
<title>__x64_sys_clock_gettime (2 samples, 0.53%)</title><rect x="1174.5" y="309" width="6.2" height="15.0" fill="rgb(220,125,40)" rx="2" ry="2" />
<text  x="1177.47" y="319.5" ></text>
</g>
<g >
<title>delayed_put_pid (1 samples, 0.26%)</title><rect x="348.5" y="117" width="3.1" height="15.0" fill="rgb(242,205,38)" rx="2" ry="2" />
<text  x="351.47" y="127.5" ></text>
</g>
<g >
<title>rcu_core (1 samples, 0.26%)</title><rect x="348.5" y="133" width="3.1" height="15.0" fill="rgb(222,165,15)" rx="2" ry="2" />
<text  x="351.47" y="143.5" ></text>
</g>
<g >
<title>clear_page_erms (64 samples, 16.84%)</title><rect x="733.5" y="37" width="198.8" height="15.0" fill="rgb(222,82,18)" rx="2" ry="2" />
<text  x="736.53" y="47.5" >clear_page_erms</text>
</g>
<g >
<title>memset_erms (2 samples, 0.53%)</title><rect x="541.0" y="229" width="6.2" height="15.0" fill="rgb(241,159,46)" rx="2" ry="2" />
<text  x="544.00" y="239.5" ></text>
</g>
<g >
<title>__schedule (66 samples, 17.37%)</title><rect x="34.8" y="229" width="205.0" height="15.0" fill="rgb(235,45,21)" rx="2" ry="2" />
<text  x="37.84" y="239.5" >__schedule</text>
</g>
<g >
<title>__mutex_init (1 samples, 0.26%)</title><rect x="317.4" y="261" width="3.1" height="15.0" fill="rgb(230,75,49)" rx="2" ry="2" />
<text  x="320.42" y="271.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="1168.3" y="309" width="3.1" height="15.0" fill="rgb(209,224,46)" rx="2" ry="2" />
<text  x="1171.26" y="319.5" ></text>
</g>
<g >
<title>alloc_pages_current (7 samples, 1.84%)</title><rect x="488.2" y="133" width="21.7" height="15.0" fill="rgb(254,122,19)" rx="2" ry="2" />
<text  x="491.21" y="143.5" >a..</text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.79%)</title><rect x="1171.4" y="325" width="9.3" height="15.0" fill="rgb(244,41,32)" rx="2" ry="2" />
<text  x="1174.37" y="335.5" ></text>
</g>
<g >
<title>get_random_u32 (1 samples, 0.26%)</title><rect x="509.9" y="149" width="3.2" height="15.0" fill="rgb(220,176,0)" rx="2" ry="2" />
<text  x="512.95" y="159.5" ></text>
</g>
<g >
<title>perf_event_task (8 samples, 2.11%)</title><rect x="568.9" y="229" width="24.9" height="15.0" fill="rgb(215,66,43)" rx="2" ry="2" />
<text  x="571.95" y="239.5" >p..</text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.26%)</title><rect x="590.7" y="149" width="3.1" height="15.0" fill="rgb(222,83,39)" rx="2" ry="2" />
<text  x="593.68" y="159.5" ></text>
</g>
<g >
<title>call_rcu (3 samples, 0.79%)</title><rect x="289.5" y="181" width="9.3" height="15.0" fill="rgb(238,184,5)" rx="2" ry="2" />
<text  x="292.47" y="191.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.26%)</title><rect x="348.5" y="197" width="3.1" height="15.0" fill="rgb(241,61,29)" rx="2" ry="2" />
<text  x="351.47" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (89 samples, 23.42%)</title><rect x="22.4" y="325" width="276.4" height="15.0" fill="rgb(213,101,1)" rx="2" ry="2" />
<text  x="25.42" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.26%)</title><rect x="1186.9" y="293" width="3.1" height="15.0" fill="rgb(214,41,31)" rx="2" ry="2" />
<text  x="1189.89" y="303.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.26%)</title><rect x="388.8" y="213" width="3.1" height="15.0" fill="rgb(212,40,5)" rx="2" ry="2" />
<text  x="391.84" y="223.5" ></text>
</g>
<g >
<title>get_random_u64 (1 samples, 0.26%)</title><rect x="485.1" y="229" width="3.1" height="15.0" fill="rgb(216,52,26)" rx="2" ry="2" />
<text  x="488.11" y="239.5" ></text>
</g>
<g >
<title>__syscall_return_slowpath (1 samples, 0.26%)</title><rect x="314.3" y="309" width="3.1" height="15.0" fill="rgb(223,77,49)" rx="2" ry="2" />
<text  x="317.32" y="319.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.26%)</title><rect x="559.6" y="165" width="3.1" height="15.0" fill="rgb(245,38,51)" rx="2" ry="2" />
<text  x="562.63" y="175.5" ></text>
</g>
<g >
<title>__kmalloc (1 samples, 0.26%)</title><rect x="1009.9" y="213" width="3.1" height="15.0" fill="rgb(221,15,44)" rx="2" ry="2" />
<text  x="1012.89" y="223.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.26%)</title><rect x="590.7" y="85" width="3.1" height="15.0" fill="rgb(254,91,6)" rx="2" ry="2" />
<text  x="593.68" y="95.5" ></text>
</g>
<g >
<title>___slab_alloc (8 samples, 2.11%)</title><rect x="488.2" y="197" width="24.9" height="15.0" fill="rgb(234,28,36)" rx="2" ry="2" />
<text  x="491.21" y="207.5" >_..</text>
</g>
<g >
<title>dup_fd (3 samples, 0.79%)</title><rect x="385.7" y="245" width="9.4" height="15.0" fill="rgb(210,142,21)" rx="2" ry="2" />
<text  x="388.74" y="255.5" ></text>
</g>
<g >
<title>__clone (277 samples, 72.89%)</title><rect x="298.8" y="357" width="860.1" height="15.0" fill="rgb(230,41,9)" rx="2" ry="2" />
<text  x="301.79" y="367.5" >__clone</text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.26%)</title><rect x="559.6" y="181" width="3.1" height="15.0" fill="rgb(233,4,34)" rx="2" ry="2" />
<text  x="562.63" y="191.5" ></text>
</g>
<g >
<title>mutex_unlock (2 samples, 0.53%)</title><rect x="975.7" y="213" width="6.2" height="15.0" fill="rgb(220,92,37)" rx="2" ry="2" />
<text  x="978.74" y="223.5" ></text>
</g>
<g >
<title>freezer_fork (1 samples, 0.26%)</title><rect x="547.2" y="245" width="3.1" height="15.0" fill="rgb(213,54,1)" rx="2" ry="2" />
<text  x="550.21" y="255.5" ></text>
</g>
<g >
<title>schedule (66 samples, 17.37%)</title><rect x="34.8" y="245" width="205.0" height="15.0" fill="rgb(234,109,43)" rx="2" ry="2" />
<text  x="37.84" y="255.5" >schedule</text>
</g>
<g >
<title>memset_erms (1 samples, 0.26%)</title><rect x="391.9" y="229" width="3.2" height="15.0" fill="rgb(244,72,54)" rx="2" ry="2" />
<text  x="394.95" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (272 samples, 71.58%)</title><rect x="314.3" y="325" width="844.6" height="15.0" fill="rgb(215,133,19)" rx="2" ry="2" />
<text  x="317.32" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>task_scan_min (1 samples, 0.26%)</title><rect x="1006.8" y="181" width="3.1" height="15.0" fill="rgb(208,23,1)" rx="2" ry="2" />
<text  x="1009.79" y="191.5" ></text>
</g>
<g >
<title>perf_event__id_header_size.isra.0 (1 samples, 0.26%)</title><rect x="981.9" y="213" width="3.2" height="15.0" fill="rgb(243,58,21)" rx="2" ry="2" />
<text  x="984.95" y="223.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.26%)</title><rect x="559.6" y="229" width="3.1" height="15.0" fill="rgb(238,188,37)" rx="2" ry="2" />
<text  x="562.63" y="239.5" ></text>
</g>
<g >
<title>cpu_cgroup_fork (1 samples, 0.26%)</title><rect x="354.7" y="229" width="3.1" height="15.0" fill="rgb(236,185,16)" rx="2" ry="2" />
<text  x="357.68" y="239.5" ></text>
</g>
<g >
<title>ktime_get_real_ts64 (2 samples, 0.53%)</title><rect x="1174.5" y="277" width="6.2" height="15.0" fill="rgb(211,108,5)" rx="2" ry="2" />
<text  x="1177.47" y="287.5" ></text>
</g>
<g >
<title>cgroup_release (1 samples, 0.26%)</title><rect x="283.3" y="197" width="3.1" height="15.0" fill="rgb(239,185,0)" rx="2" ry="2" />
<text  x="286.26" y="207.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.26%)</title><rect x="348.5" y="181" width="3.1" height="15.0" fill="rgb(254,148,0)" rx="2" ry="2" />
<text  x="351.47" y="191.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.26%)</title><rect x="938.5" y="181" width="3.1" height="15.0" fill="rgb(224,221,29)" rx="2" ry="2" />
<text  x="941.47" y="191.5" ></text>
</g>
<g >
<title>___slab_alloc (68 samples, 17.89%)</title><rect x="727.3" y="149" width="211.2" height="15.0" fill="rgb(242,133,29)" rx="2" ry="2" />
<text  x="730.32" y="159.5" >___slab_alloc</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.26%)</title><rect x="348.5" y="165" width="3.1" height="15.0" fill="rgb(220,144,19)" rx="2" ry="2" />
<text  x="351.47" y="175.5" ></text>
</g>
<g >
<title>local_clock (1 samples, 0.26%)</title><rect x="590.7" y="165" width="3.1" height="15.0" fill="rgb(205,125,34)" rx="2" ry="2" />
<text  x="593.68" y="175.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.26%)</title><rect x="370.2" y="197" width="3.1" height="15.0" fill="rgb(226,126,20)" rx="2" ry="2" />
<text  x="373.21" y="207.5" ></text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.26%)</title><rect x="438.5" y="197" width="3.1" height="15.0" fill="rgb(232,79,39)" rx="2" ry="2" />
<text  x="441.53" y="207.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.26%)</title><rect x="509.9" y="133" width="3.2" height="15.0" fill="rgb(219,228,1)" rx="2" ry="2" />
<text  x="512.95" y="143.5" ></text>
</g>
<g >
<title>kernel_wait4 (88 samples, 23.16%)</title><rect x="25.5" y="277" width="273.3" height="15.0" fill="rgb(217,166,11)" rx="2" ry="2" />
<text  x="28.53" y="287.5" >kernel_wait4</text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.26%)</title><rect x="587.6" y="133" width="3.1" height="15.0" fill="rgb(239,213,54)" rx="2" ry="2" />
<text  x="590.58" y="143.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_trace (69 samples, 18.16%)</title><rect x="724.2" y="181" width="214.3" height="15.0" fill="rgb(228,193,47)" rx="2" ry="2" />
<text  x="727.21" y="191.5" >kmem_cache_alloc_trace</text>
</g>
<g >
<title>alloc_slab_page (66 samples, 17.37%)</title><rect x="730.4" y="101" width="205.0" height="15.0" fill="rgb(252,193,29)" rx="2" ry="2" />
<text  x="733.42" y="111.5" >alloc_slab_page</text>
</g>
<g >
<title>__do_sys_wait4 (88 samples, 23.16%)</title><rect x="25.5" y="293" width="273.3" height="15.0" fill="rgb(207,164,30)" rx="2" ry="2" />
<text  x="28.53" y="303.5" >__do_sys_wait4</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.26%)</title><rect x="1180.7" y="357" width="3.1" height="15.0" fill="rgb(227,180,1)" rx="2" ry="2" />
<text  x="1183.68" y="367.5" ></text>
</g>
<g >
<title>clear_page_erms (7 samples, 1.84%)</title><rect x="488.2" y="85" width="21.7" height="15.0" fill="rgb(251,65,3)" rx="2" ry="2" />
<text  x="491.21" y="95.5" >c..</text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.26%)</title><rect x="596.9" y="229" width="3.1" height="15.0" fill="rgb(215,147,45)" rx="2" ry="2" />
<text  x="599.89" y="239.5" ></text>
</g>
<g >
<title>__do_sys_clone (271 samples, 71.32%)</title><rect x="317.4" y="293" width="841.5" height="15.0" fill="rgb(251,48,2)" rx="2" ry="2" />
<text  x="320.42" y="303.5" >__do_sys_clone</text>
</g>
<g >
<title>sched_clock (1 samples, 0.26%)</title><rect x="590.7" y="117" width="3.1" height="15.0" fill="rgb(236,35,4)" rx="2" ry="2" />
<text  x="593.68" y="127.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.26%)</title><rect x="1168.3" y="293" width="3.1" height="15.0" fill="rgb(253,148,37)" rx="2" ry="2" />
<text  x="1171.26" y="303.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.26%)</title><rect x="348.5" y="213" width="3.1" height="15.0" fill="rgb(232,96,1)" rx="2" ry="2" />
<text  x="351.47" y="223.5" ></text>
</g>
<g >
<title>__srcu_read_lock (2 samples, 0.53%)</title><rect x="714.9" y="181" width="6.2" height="15.0" fill="rgb(205,20,13)" rx="2" ry="2" />
<text  x="717.89" y="191.5" ></text>
</g>
<g >
<title>local_clock (1 samples, 0.26%)</title><rect x="587.6" y="149" width="3.1" height="15.0" fill="rgb(254,20,53)" rx="2" ry="2" />
<text  x="590.58" y="159.5" ></text>
</g>
<g >
<title>memset_erms (11 samples, 2.89%)</title><rect x="941.6" y="181" width="34.1" height="15.0" fill="rgb(209,163,39)" rx="2" ry="2" />
<text  x="944.58" y="191.5" >me..</text>
</g>
<g >
<title>mmap64 (1 samples, 0.26%)</title><rect x="1186.9" y="373" width="3.1" height="15.0" fill="rgb(244,176,52)" rx="2" ry="2" />
<text  x="1189.89" y="383.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (1 samples, 0.26%)</title><rect x="345.4" y="245" width="3.1" height="15.0" fill="rgb(222,229,47)" rx="2" ry="2" />
<text  x="348.37" y="255.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.26%)</title><rect x="354.7" y="213" width="3.1" height="15.0" fill="rgb(214,110,15)" rx="2" ry="2" />
<text  x="357.68" y="223.5" ></text>
</g>
<g >
<title>__GI___wait4 (91 samples, 23.95%)</title><rect x="16.2" y="357" width="282.6" height="15.0" fill="rgb(244,24,35)" rx="2" ry="2" />
<text  x="19.21" y="367.5" >__GI___wait4</text>
</g>
<g >
<title>__lock_text_start (16 samples, 4.21%)</title><rect x="634.2" y="197" width="49.6" height="15.0" fill="rgb(232,134,22)" rx="2" ry="2" />
<text  x="637.16" y="207.5" >__loc..</text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.26%)</title><rect x="373.3" y="197" width="3.1" height="15.0" fill="rgb(254,49,46)" rx="2" ry="2" />
<text  x="376.32" y="207.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.26%)</title><rect x="935.4" y="85" width="3.1" height="15.0" fill="rgb(247,38,39)" rx="2" ry="2" />
<text  x="938.37" y="95.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.26%)</title><rect x="1168.3" y="277" width="3.1" height="15.0" fill="rgb(250,102,14)" rx="2" ry="2" />
<text  x="1171.26" y="287.5" ></text>
</g>
<g >
<title>perf_event_alloc (90 samples, 23.68%)</title><rect x="696.3" y="197" width="279.4" height="15.0" fill="rgb(217,4,52)" rx="2" ry="2" />
<text  x="699.26" y="207.5" >perf_event_alloc</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.26%)</title><rect x="10.0" y="293" width="3.1" height="15.0" fill="rgb(218,139,7)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.26%)</title><rect x="1180.7" y="213" width="3.1" height="15.0" fill="rgb(237,110,47)" rx="2" ry="2" />
<text  x="1183.68" y="223.5" ></text>
</g>
<g >
<title>all (380 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(247,221,33)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.26%)</title><rect x="413.7" y="213" width="3.1" height="15.0" fill="rgb(215,62,32)" rx="2" ry="2" />
<text  x="416.68" y="223.5" ></text>
</g>
<g >
<title>sched_clock_local (1 samples, 0.26%)</title><rect x="590.7" y="133" width="3.1" height="15.0" fill="rgb(248,14,18)" rx="2" ry="2" />
<text  x="593.68" y="143.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (7 samples, 1.84%)</title><rect x="1158.9" y="357" width="21.8" height="15.0" fill="rgb(242,89,11)" rx="2" ry="2" />
<text  x="1161.95" y="367.5" >_..</text>
</g>
<g >
<title>__memcg_kmem_charge_page (6 samples, 1.58%)</title><rect x="398.2" y="229" width="18.6" height="15.0" fill="rgb(206,8,34)" rx="2" ry="2" />
<text  x="401.16" y="239.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.26%)</title><rect x="1168.3" y="341" width="3.1" height="15.0" fill="rgb(220,139,52)" rx="2" ry="2" />
<text  x="1171.26" y="351.5" ></text>
</g>
<g >
<title>mprotect (1 samples, 0.26%)</title><rect x="10.0" y="325" width="3.1" height="15.0" fill="rgb(244,199,17)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>dl_main (1 samples, 0.26%)</title><rect x="10.0" y="341" width="3.1" height="15.0" fill="rgb(249,149,43)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>__task_pid_nr_ns (2 samples, 0.53%)</title><rect x="246.0" y="213" width="6.2" height="15.0" fill="rgb(226,68,49)" rx="2" ry="2" />
<text  x="249.00" y="223.5" ></text>
</g>
<g >
<title>my_clone (380 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(247,77,24)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >my_clone</text>
</g>
<g >
<title>wait_task_zombie (18 samples, 4.74%)</title><rect x="242.9" y="229" width="55.9" height="15.0" fill="rgb(254,185,40)" rx="2" ry="2" />
<text  x="245.89" y="239.5" >wait_..</text>
</g>
<g >
<title>clear_page_erms (6 samples, 1.58%)</title><rect x="454.1" y="165" width="18.6" height="15.0" fill="rgb(213,204,14)" rx="2" ry="2" />
<text  x="457.05" y="175.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.26%)</title><rect x="559.6" y="133" width="3.1" height="15.0" fill="rgb(248,95,6)" rx="2" ry="2" />
<text  x="562.63" y="143.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.26%)</title><rect x="348.5" y="229" width="3.1" height="15.0" fill="rgb(238,178,42)" rx="2" ry="2" />
<text  x="351.47" y="239.5" ></text>
</g>
<g >
<title>cpu_cgroup_fork (1 samples, 0.26%)</title><rect x="382.6" y="245" width="3.1" height="15.0" fill="rgb(231,16,28)" rx="2" ry="2" />
<text  x="385.63" y="255.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.26%)</title><rect x="932.3" y="37" width="3.1" height="15.0" fill="rgb(245,174,49)" rx="2" ry="2" />
<text  x="935.26" y="47.5" ></text>
</g>
<g >
<title>path_get (2 samples, 0.53%)</title><rect x="376.4" y="229" width="6.2" height="15.0" fill="rgb(254,216,43)" rx="2" ry="2" />
<text  x="379.42" y="239.5" ></text>
</g>
<g >
<title>__hrtimer_init (3 samples, 0.79%)</title><rect x="550.3" y="229" width="9.3" height="15.0" fill="rgb(253,139,5)" rx="2" ry="2" />
<text  x="553.32" y="239.5" ></text>
</g>
<g >
<title>init_numa_balancing (1 samples, 0.26%)</title><rect x="1006.8" y="213" width="3.1" height="15.0" fill="rgb(239,36,9)" rx="2" ry="2" />
<text  x="1009.79" y="223.5" ></text>
</g>
<g >
<title>release_task (15 samples, 3.95%)</title><rect x="252.2" y="213" width="46.6" height="15.0" fill="rgb(207,78,33)" rx="2" ry="2" />
<text  x="255.21" y="223.5" >rele..</text>
</g>
<g >
<title>__slab_free (1 samples, 0.26%)</title><rect x="348.5" y="69" width="3.1" height="15.0" fill="rgb(234,93,11)" rx="2" ry="2" />
<text  x="351.47" y="79.5" ></text>
</g>
<g >
<title>get_page_from_freelist (7 samples, 1.84%)</title><rect x="488.2" y="101" width="21.7" height="15.0" fill="rgb(251,151,54)" rx="2" ry="2" />
<text  x="491.21" y="111.5" >g..</text>
</g>
<g >
<title>finish_task_switch (65 samples, 17.11%)</title><rect x="37.9" y="213" width="201.9" height="15.0" fill="rgb(250,41,12)" rx="2" ry="2" />
<text  x="40.95" y="223.5" >finish_task_switch</text>
</g>
<g >
<title>alloc_vmap_area (6 samples, 1.58%)</title><rect x="419.9" y="197" width="18.6" height="15.0" fill="rgb(215,139,26)" rx="2" ry="2" />
<text  x="422.89" y="207.5" ></text>
</g>
<g >
<title>pids_release (1 samples, 0.26%)</title><rect x="283.3" y="181" width="3.1" height="15.0" fill="rgb(247,192,27)" rx="2" ry="2" />
<text  x="286.26" y="191.5" ></text>
</g>
<g >
<title>__x64_sys_clone (1 samples, 0.26%)</title><rect x="311.2" y="325" width="3.1" height="15.0" fill="rgb(205,201,26)" rx="2" ry="2" />
<text  x="314.21" y="335.5" ></text>
</g>
<g >
<title>copy_creds (6 samples, 1.58%)</title><rect x="357.8" y="245" width="18.6" height="15.0" fill="rgb(222,25,53)" rx="2" ry="2" />
<text  x="360.79" y="255.5" ></text>
</g>
<g >
<title>alloc_pages_current (14 samples, 3.68%)</title><rect x="441.6" y="213" width="43.5" height="15.0" fill="rgb(228,44,27)" rx="2" ry="2" />
<text  x="444.63" y="223.5" >allo..</text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.26%)</title><rect x="348.5" y="85" width="3.1" height="15.0" fill="rgb(230,100,2)" rx="2" ry="2" />
<text  x="351.47" y="95.5" ></text>
</g>
<g >
<title>ldt_arch_exit_mmap (1 samples, 0.26%)</title><rect x="1180.7" y="261" width="3.1" height="15.0" fill="rgb(231,190,22)" rx="2" ry="2" />
<text  x="1183.68" y="271.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (7 samples, 1.84%)</title><rect x="1158.9" y="373" width="21.8" height="15.0" fill="rgb(245,169,1)" rx="2" ry="2" />
<text  x="1161.95" y="383.5" >c..</text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.26%)</title><rect x="559.6" y="149" width="3.1" height="15.0" fill="rgb(252,64,51)" rx="2" ry="2" />
<text  x="562.63" y="159.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (10 samples, 2.63%)</title><rect x="488.2" y="229" width="31.1" height="15.0" fill="rgb(231,121,50)" rx="2" ry="2" />
<text  x="491.21" y="239.5" >km..</text>
</g>
<g >
<title>new_slab (8 samples, 2.11%)</title><rect x="488.2" y="181" width="24.9" height="15.0" fill="rgb(237,169,13)" rx="2" ry="2" />
<text  x="491.21" y="191.5" >n..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.26%)</title><rect x="348.5" y="245" width="3.1" height="15.0" fill="rgb(206,4,52)" rx="2" ry="2" />
<text  x="351.47" y="255.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (1 samples, 0.26%)</title><rect x="1180.7" y="181" width="3.1" height="15.0" fill="rgb(231,220,17)" rx="2" ry="2" />
<text  x="1183.68" y="191.5" ></text>
</g>
<g >
<title>perf_event_init_task (127 samples, 33.42%)</title><rect x="593.8" y="245" width="394.4" height="15.0" fill="rgb(241,84,42)" rx="2" ry="2" />
<text  x="596.79" y="255.5" >perf_event_init_task</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.26%)</title><rect x="559.6" y="213" width="3.1" height="15.0" fill="rgb(234,184,21)" rx="2" ry="2" />
<text  x="562.63" y="223.5" ></text>
</g>
<g >
<title>__slab_alloc (69 samples, 18.16%)</title><rect x="724.2" y="165" width="214.3" height="15.0" fill="rgb(247,25,10)" rx="2" ry="2" />
<text  x="727.21" y="175.5" >__slab_alloc</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.26%)</title><rect x="10.0" y="309" width="3.1" height="15.0" fill="rgb(207,27,42)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>prepare_creds (6 samples, 1.58%)</title><rect x="357.8" y="229" width="18.6" height="15.0" fill="rgb(228,31,12)" rx="2" ry="2" />
<text  x="360.79" y="239.5" ></text>
</g>
<g >
<title>propagate_protected_usage (1 samples, 0.26%)</title><rect x="410.6" y="181" width="3.1" height="15.0" fill="rgb(212,127,17)" rx="2" ry="2" />
<text  x="413.58" y="191.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.53%)</title><rect x="10.0" y="373" width="6.2" height="15.0" fill="rgb(243,34,49)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>cgroup_post_fork (2 samples, 0.53%)</title><rect x="351.6" y="245" width="6.2" height="15.0" fill="rgb(207,70,27)" rx="2" ry="2" />
<text  x="354.58" y="255.5" ></text>
</g>
<g >
<title>may_expand_vm (1 samples, 0.26%)</title><rect x="1186.9" y="261" width="3.1" height="15.0" fill="rgb(234,48,5)" rx="2" ry="2" />
<text  x="1189.89" y="271.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.26%)</title><rect x="985.1" y="213" width="3.1" height="15.0" fill="rgb(250,45,23)" rx="2" ry="2" />
<text  x="988.05" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.26%)</title><rect x="1186.9" y="341" width="3.1" height="15.0" fill="rgb(232,146,8)" rx="2" ry="2" />
<text  x="1189.89" y="351.5" ></text>
</g>
<g >
<title>sched_fork (4 samples, 1.05%)</title><rect x="997.5" y="245" width="12.4" height="15.0" fill="rgb(206,214,5)" rx="2" ry="2" />
<text  x="1000.47" y="255.5" ></text>
</g>
<g >
<title>security_task_alloc (1 samples, 0.26%)</title><rect x="1009.9" y="245" width="3.1" height="15.0" fill="rgb(252,80,2)" rx="2" ry="2" />
<text  x="1012.89" y="255.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge (5 samples, 1.32%)</title><rect x="398.2" y="213" width="15.5" height="15.0" fill="rgb(210,103,24)" rx="2" ry="2" />
<text  x="401.16" y="223.5" ></text>
</g>
<g >
<title>smp_call_function_many (1 samples, 0.26%)</title><rect x="1180.7" y="165" width="3.1" height="15.0" fill="rgb(232,112,50)" rx="2" ry="2" />
<text  x="1183.68" y="175.5" ></text>
</g>
<g >
<title>mutex_lock (2 samples, 0.53%)</title><rect x="562.7" y="245" width="6.2" height="15.0" fill="rgb(223,226,8)" rx="2" ry="2" />
<text  x="565.74" y="255.5" ></text>
</g>
<g >
<title>alloc_perf_context (1 samples, 0.26%)</title><rect x="600.0" y="213" width="3.1" height="15.0" fill="rgb(245,58,27)" rx="2" ry="2" />
<text  x="603.00" y="223.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.26%)</title><rect x="1186.9" y="277" width="3.1" height="15.0" fill="rgb(221,20,11)" rx="2" ry="2" />
<text  x="1189.89" y="287.5" ></text>
</g>
<g >
<title>alloc_slab_page (7 samples, 1.84%)</title><rect x="488.2" y="149" width="21.7" height="15.0" fill="rgb(209,171,19)" rx="2" ry="2" />
<text  x="491.21" y="159.5" >a..</text>
</g>
<g >
<title>kvm_sched_clock_read (1 samples, 0.26%)</title><rect x="590.7" y="101" width="3.1" height="15.0" fill="rgb(237,123,2)" rx="2" ry="2" />
<text  x="593.68" y="111.5" ></text>
</g>
<g >
<title>posix_get_realtime_timespec (2 samples, 0.53%)</title><rect x="1174.5" y="293" width="6.2" height="15.0" fill="rgb(230,46,41)" rx="2" ry="2" />
<text  x="1177.47" y="303.5" ></text>
</g>
<g >
<title>sched_clock_local (1 samples, 0.26%)</title><rect x="587.6" y="117" width="3.1" height="15.0" fill="rgb(237,164,47)" rx="2" ry="2" />
<text  x="590.58" y="127.5" ></text>
</g>
<g >
<title>__sched_fork (1 samples, 0.26%)</title><rect x="1006.8" y="229" width="3.1" height="15.0" fill="rgb(205,130,11)" rx="2" ry="2" />
<text  x="1009.79" y="239.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.26%)</title><rect x="1180.7" y="325" width="3.1" height="15.0" fill="rgb(242,8,2)" rx="2" ry="2" />
<text  x="1183.68" y="335.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.26%)</title><rect x="336.1" y="229" width="3.1" height="15.0" fill="rgb(216,56,49)" rx="2" ry="2" />
<text  x="339.05" y="239.5" ></text>
</g>
<g >
<title>allocate_slab (68 samples, 17.89%)</title><rect x="727.3" y="117" width="211.2" height="15.0" fill="rgb(219,116,1)" rx="2" ry="2" />
<text  x="730.32" y="127.5" >allocate_slab</text>
</g>
<g >
<title>memcpy_erms (7 samples, 1.84%)</title><rect x="519.3" y="229" width="21.7" height="15.0" fill="rgb(213,179,1)" rx="2" ry="2" />
<text  x="522.26" y="239.5" >m..</text>
</g>
<g >
<title>__alloc_pages_nodemask (7 samples, 1.84%)</title><rect x="488.2" y="117" width="21.7" height="15.0" fill="rgb(207,83,40)" rx="2" ry="2" />
<text  x="491.21" y="127.5" >_..</text>
</g>
<g >
<title>do_exit (1 samples, 0.26%)</title><rect x="1180.7" y="309" width="3.1" height="15.0" fill="rgb(212,201,34)" rx="2" ry="2" />
<text  x="1183.68" y="319.5" ></text>
</g>
<g >
<title>inherit_event.isra.0 (120 samples, 31.58%)</title><rect x="603.1" y="213" width="372.6" height="15.0" fill="rgb(234,110,23)" rx="2" ry="2" />
<text  x="606.11" y="223.5" >inherit_event.isra.0</text>
</g>
<g >
<title>wait_consider_task (19 samples, 5.00%)</title><rect x="239.8" y="245" width="59.0" height="15.0" fill="rgb(220,77,40)" rx="2" ry="2" />
<text  x="242.79" y="255.5" >wait_c..</text>
</g>
<g >
<title>__x64_sys_clone (271 samples, 71.32%)</title><rect x="317.4" y="309" width="841.5" height="15.0" fill="rgb(225,163,4)" rx="2" ry="2" />
<text  x="320.42" y="319.5" >__x64_sys_clone</text>
</g>
<g >
<title>copy_fs_struct (2 samples, 0.53%)</title><rect x="376.4" y="245" width="6.2" height="15.0" fill="rgb(249,28,44)" rx="2" ry="2" />
<text  x="379.42" y="255.5" ></text>
</g>
<g >
<title>wake_up_new_task (47 samples, 12.37%)</title><rect x="1013.0" y="261" width="145.9" height="15.0" fill="rgb(243,194,33)" rx="2" ry="2" />
<text  x="1016.00" y="271.5" >wake_up_new_task</text>
</g>
<g >
<title>ktime_get (1 samples, 0.26%)</title><rect x="559.6" y="245" width="3.1" height="15.0" fill="rgb(253,124,7)" rx="2" ry="2" />
<text  x="562.63" y="255.5" ></text>
</g>
<g >
<title>free_ldt_pgtables (1 samples, 0.26%)</title><rect x="1180.7" y="245" width="3.1" height="15.0" fill="rgb(253,8,51)" rx="2" ry="2" />
<text  x="1183.68" y="255.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (2 samples, 0.53%)</title><rect x="513.1" y="213" width="6.2" height="15.0" fill="rgb(244,46,31)" rx="2" ry="2" />
<text  x="516.05" y="223.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (2 samples, 0.53%)</title><rect x="1174.5" y="261" width="6.2" height="15.0" fill="rgb(250,200,33)" rx="2" ry="2" />
<text  x="1177.47" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (273 samples, 71.84%)</title><rect x="311.2" y="341" width="847.7" height="15.0" fill="rgb(220,197,24)" rx="2" ry="2" />
<text  x="314.21" y="351.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.26%)</title><rect x="28.6" y="229" width="3.1" height="15.0" fill="rgb(208,36,31)" rx="2" ry="2" />
<text  x="31.63" y="239.5" ></text>
</g>
<g >
<title>handle_intel.constprop.0 (1 samples, 0.26%)</title><rect x="1183.8" y="373" width="3.1" height="15.0" fill="rgb(246,47,38)" rx="2" ry="2" />
<text  x="1186.79" y="383.5" ></text>
</g>
<g >
<title>get_page_from_freelist (11 samples, 2.89%)</title><rect x="450.9" y="181" width="34.2" height="15.0" fill="rgb(212,46,52)" rx="2" ry="2" />
<text  x="453.95" y="191.5" >ge..</text>
</g>
<g >
<title>__x64_sys_wait4 (88 samples, 23.16%)</title><rect x="25.5" y="309" width="273.3" height="15.0" fill="rgb(222,188,28)" rx="2" ry="2" />
<text  x="28.53" y="319.5" >__x64_sys_wait4</text>
</g>
<g >
<title>lsm_task_alloc (1 samples, 0.26%)</title><rect x="1009.9" y="229" width="3.1" height="15.0" fill="rgb(221,182,49)" rx="2" ry="2" />
<text  x="1012.89" y="239.5" ></text>
</g>
</g>
</svg>
