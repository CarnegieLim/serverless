<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>__lock_text_start (2 samples, 0.58%)</title><rect x="910.5" y="245" width="6.9" height="15.0" fill="rgb(219,10,54)" rx="2" ry="2" />
<text  x="913.53" y="255.5" ></text>
</g>
<g >
<title>perf_iterate_sb (11 samples, 3.22%)</title><rect x="548.2" y="229" width="38.0" height="15.0" fill="rgb(209,18,13)" rx="2" ry="2" />
<text  x="551.25" y="239.5" >per..</text>
</g>
<g >
<title>get_page_from_freelist (3 samples, 0.88%)</title><rect x="506.8" y="117" width="10.4" height="15.0" fill="rgb(230,212,48)" rx="2" ry="2" />
<text  x="509.84" y="127.5" ></text>
</g>
<g >
<title>perf_try_init_event (2 samples, 0.58%)</title><rect x="889.8" y="197" width="6.9" height="15.0" fill="rgb(226,85,47)" rx="2" ry="2" />
<text  x="892.82" y="207.5" ></text>
</g>
<g >
<title>add_wait_queue (1 samples, 0.29%)</title><rect x="37.6" y="261" width="3.5" height="15.0" fill="rgb(206,161,7)" rx="2" ry="2" />
<text  x="40.60" y="271.5" ></text>
</g>
<g >
<title>security_task_alloc (2 samples, 0.58%)</title><rect x="924.3" y="261" width="6.9" height="15.0" fill="rgb(214,183,39)" rx="2" ry="2" />
<text  x="927.33" y="271.5" ></text>
</g>
<g >
<title>inherit_event.isra.0 (1 samples, 0.29%)</title><rect x="589.6" y="245" width="3.5" height="15.0" fill="rgb(219,178,31)" rx="2" ry="2" />
<text  x="592.65" y="255.5" ></text>
</g>
<g >
<title>alloc_vmap_area (7 samples, 2.05%)</title><rect x="430.9" y="213" width="24.2" height="15.0" fill="rgb(252,62,28)" rx="2" ry="2" />
<text  x="433.94" y="223.5" >a..</text>
</g>
<g >
<title>memcg_kmem_get_cache (2 samples, 0.58%)</title><rect x="355.0" y="213" width="6.9" height="15.0" fill="rgb(226,209,25)" rx="2" ry="2" />
<text  x="358.03" y="223.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (4 samples, 1.17%)</title><rect x="1165.8" y="261" width="13.8" height="15.0" fill="rgb(246,135,21)" rx="2" ry="2" />
<text  x="1168.85" y="271.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.58%)</title><rect x="10.0" y="389" width="6.9" height="15.0" fill="rgb(210,177,14)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>rmqueue (3 samples, 0.88%)</title><rect x="493.0" y="181" width="10.4" height="15.0" fill="rgb(237,82,48)" rx="2" ry="2" />
<text  x="496.04" y="191.5" ></text>
</g>
<g >
<title>__kmalloc (1 samples, 0.29%)</title><rect x="361.9" y="213" width="3.5" height="15.0" fill="rgb(226,159,54)" rx="2" ry="2" />
<text  x="364.93" y="223.5" ></text>
</g>
<g >
<title>put_pid (1 samples, 0.29%)</title><rect x="938.1" y="277" width="3.5" height="15.0" fill="rgb(209,29,16)" rx="2" ry="2" />
<text  x="941.13" y="287.5" ></text>
</g>
<g >
<title>copy_creds (5 samples, 1.46%)</title><rect x="355.0" y="261" width="17.3" height="15.0" fill="rgb(215,141,27)" rx="2" ry="2" />
<text  x="358.03" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.29%)</title><rect x="303.3" y="245" width="3.4" height="15.0" fill="rgb(227,169,4)" rx="2" ry="2" />
<text  x="306.27" y="255.5" ></text>
</g>
<g >
<title>__hrtimer_init (2 samples, 0.58%)</title><rect x="889.8" y="133" width="6.9" height="15.0" fill="rgb(221,229,26)" rx="2" ry="2" />
<text  x="892.82" y="143.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (1 samples, 0.29%)</title><rect x="1179.6" y="213" width="3.5" height="15.0" fill="rgb(239,43,45)" rx="2" ry="2" />
<text  x="1182.65" y="223.5" ></text>
</g>
<g >
<title>__do_sys_wait4 (77 samples, 22.51%)</title><rect x="27.3" y="309" width="265.6" height="15.0" fill="rgb(220,104,33)" rx="2" ry="2" />
<text  x="30.25" y="319.5" >__do_sys_wait4</text>
</g>
<g >
<title>__get_vm_area_node (9 samples, 2.63%)</title><rect x="427.5" y="229" width="31.0" height="15.0" fill="rgb(227,125,25)" rx="2" ry="2" />
<text  x="430.49" y="239.5" >__..</text>
</g>
<g >
<title>page_counter_try_charge (5 samples, 1.46%)</title><rect x="403.3" y="213" width="17.3" height="15.0" fill="rgb(226,69,49)" rx="2" ry="2" />
<text  x="406.33" y="223.5" ></text>
</g>
<g >
<title>perf_event_init_task (93 samples, 27.19%)</title><rect x="586.2" y="261" width="320.9" height="15.0" fill="rgb(220,135,23)" rx="2" ry="2" />
<text  x="589.20" y="271.5" >perf_event_init_task</text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.29%)</title><rect x="531.0" y="245" width="3.4" height="15.0" fill="rgb(225,219,44)" rx="2" ry="2" />
<text  x="533.99" y="255.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="41.1" y="245" width="3.4" height="15.0" fill="rgb(244,44,7)" rx="2" ry="2" />
<text  x="44.05" y="255.5" ></text>
</g>
<g >
<title>__rb_insert_augmented (1 samples, 0.29%)</title><rect x="448.2" y="181" width="3.4" height="15.0" fill="rgb(241,85,14)" rx="2" ry="2" />
<text  x="451.19" y="191.5" ></text>
</g>
<g >
<title>prepare_creds (5 samples, 1.46%)</title><rect x="355.0" y="245" width="17.3" height="15.0" fill="rgb(232,192,19)" rx="2" ry="2" />
<text  x="358.03" y="255.5" ></text>
</g>
<g >
<title>sched_clock (2 samples, 0.58%)</title><rect x="565.5" y="117" width="6.9" height="15.0" fill="rgb(253,106,46)" rx="2" ry="2" />
<text  x="568.50" y="127.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.29%)</title><rect x="16.9" y="309" width="3.5" height="15.0" fill="rgb(244,147,1)" rx="2" ry="2" />
<text  x="19.90" y="319.5" ></text>
</g>
<g >
<title>__do_sys_clone (244 samples, 71.35%)</title><rect x="296.4" y="309" width="841.8" height="15.0" fill="rgb(244,145,47)" rx="2" ry="2" />
<text  x="299.37" y="319.5" >__do_sys_clone</text>
</g>
<g >
<title>all (342 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(205,129,2)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>memset_erms (1 samples, 0.29%)</title><rect x="393.0" y="245" width="3.4" height="15.0" fill="rgb(240,133,2)" rx="2" ry="2" />
<text  x="395.98" y="255.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.29%)</title><rect x="327.4" y="245" width="3.5" height="15.0" fill="rgb(213,213,11)" rx="2" ry="2" />
<text  x="330.43" y="255.5" ></text>
</g>
<g >
<title>inherit_event.isra.0 (88 samples, 25.73%)</title><rect x="593.1" y="229" width="303.6" height="15.0" fill="rgb(220,193,35)" rx="2" ry="2" />
<text  x="596.10" y="239.5" >inherit_event.isra.0</text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.29%)</title><rect x="1183.1" y="309" width="3.4" height="15.0" fill="rgb(210,161,53)" rx="2" ry="2" />
<text  x="1186.10" y="319.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (2 samples, 0.58%)</title><rect x="565.5" y="85" width="6.9" height="15.0" fill="rgb(207,22,1)" rx="2" ry="2" />
<text  x="568.50" y="95.5" ></text>
</g>
<g >
<title>get_page_from_freelist (19 samples, 5.56%)</title><rect x="789.8" y="69" width="65.5" height="15.0" fill="rgb(250,102,10)" rx="2" ry="2" />
<text  x="792.77" y="79.5" >get_pag..</text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.29%)</title><rect x="389.5" y="245" width="3.5" height="15.0" fill="rgb(232,104,0)" rx="2" ry="2" />
<text  x="392.53" y="255.5" ></text>
</g>
<g >
<title>alloc_pid (6 samples, 1.75%)</title><rect x="310.2" y="261" width="20.7" height="15.0" fill="rgb(209,179,13)" rx="2" ry="2" />
<text  x="313.18" y="271.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.29%)</title><rect x="1179.6" y="293" width="3.5" height="15.0" fill="rgb(234,97,43)" rx="2" ry="2" />
<text  x="1182.65" y="303.5" ></text>
</g>
<g >
<title>dup_task_struct (38 samples, 11.11%)</title><rect x="396.4" y="261" width="131.1" height="15.0" fill="rgb(226,140,42)" rx="2" ry="2" />
<text  x="399.43" y="271.5" >dup_task_struct</text>
</g>
<g >
<title>do_mmap (1 samples, 0.29%)</title><rect x="1183.1" y="293" width="3.4" height="15.0" fill="rgb(206,39,26)" rx="2" ry="2" />
<text  x="1186.10" y="303.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_trace (27 samples, 7.89%)</title><rect x="772.5" y="197" width="93.2" height="15.0" fill="rgb(206,128,50)" rx="2" ry="2" />
<text  x="775.51" y="207.5" >kmem_cache_..</text>
</g>
<g >
<title>do_fault (1 samples, 0.29%)</title><rect x="16.9" y="293" width="3.5" height="15.0" fill="rgb(212,181,8)" rx="2" ry="2" />
<text  x="19.90" y="303.5" ></text>
</g>
<g >
<title>__percpu_down_read (1 samples, 0.29%)</title><rect x="306.7" y="261" width="3.5" height="15.0" fill="rgb(215,17,28)" rx="2" ry="2" />
<text  x="309.73" y="271.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.29%)</title><rect x="337.8" y="261" width="3.4" height="15.0" fill="rgb(232,166,24)" rx="2" ry="2" />
<text  x="340.78" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_current (20 samples, 5.85%)</title><rect x="786.3" y="101" width="69.0" height="15.0" fill="rgb(248,133,38)" rx="2" ry="2" />
<text  x="789.32" y="111.5" >alloc_p..</text>
</g>
<g >
<title>wake_up_new_task (57 samples, 16.67%)</title><rect x="941.6" y="277" width="196.6" height="15.0" fill="rgb(245,58,53)" rx="2" ry="2" />
<text  x="944.58" y="287.5" >wake_up_new_task</text>
</g>
<g >
<title>memset_erms (6 samples, 1.75%)</title><rect x="869.1" y="197" width="20.7" height="15.0" fill="rgb(244,15,15)" rx="2" ry="2" />
<text  x="872.12" y="207.5" ></text>
</g>
<g >
<title>mmap64 (1 samples, 0.29%)</title><rect x="1183.1" y="389" width="3.4" height="15.0" fill="rgb(236,94,53)" rx="2" ry="2" />
<text  x="1186.10" y="399.5" ></text>
</g>
<g >
<title>memcpy_erms (3 samples, 0.88%)</title><rect x="517.2" y="245" width="10.3" height="15.0" fill="rgb(222,49,7)" rx="2" ry="2" />
<text  x="520.19" y="255.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.29%)</title><rect x="1183.1" y="325" width="3.4" height="15.0" fill="rgb(208,155,45)" rx="2" ry="2" />
<text  x="1186.10" y="335.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.29%)</title><rect x="1179.6" y="309" width="3.5" height="15.0" fill="rgb(235,178,51)" rx="2" ry="2" />
<text  x="1182.65" y="319.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (6 samples, 1.75%)</title><rect x="399.9" y="245" width="20.7" height="15.0" fill="rgb(251,204,43)" rx="2" ry="2" />
<text  x="402.88" y="255.5" ></text>
</g>
<g >
<title>__vmalloc_node_range (24 samples, 7.02%)</title><rect x="420.6" y="245" width="82.8" height="15.0" fill="rgb(219,71,54)" rx="2" ry="2" />
<text  x="423.58" y="255.5" >__vmalloc..</text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 0.88%)</title><rect x="506.8" y="133" width="10.4" height="15.0" fill="rgb(205,119,2)" rx="2" ry="2" />
<text  x="509.84" y="143.5" ></text>
</g>
<g >
<title>hrtimer_init (2 samples, 0.58%)</title><rect x="889.8" y="149" width="6.9" height="15.0" fill="rgb(237,100,22)" rx="2" ry="2" />
<text  x="892.82" y="159.5" ></text>
</g>
<g >
<title>pids_release (1 samples, 0.29%)</title><rect x="282.6" y="197" width="3.4" height="15.0" fill="rgb(239,19,31)" rx="2" ry="2" />
<text  x="285.57" y="207.5" ></text>
</g>
<g >
<title>_do_fork (244 samples, 71.35%)</title><rect x="296.4" y="293" width="841.8" height="15.0" fill="rgb(211,160,21)" rx="2" ry="2" />
<text  x="299.37" y="303.5" >_do_fork</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.29%)</title><rect x="1186.5" y="357" width="3.5" height="15.0" fill="rgb(231,145,31)" rx="2" ry="2" />
<text  x="1189.55" y="367.5" ></text>
</g>
<g >
<title>finish_task_switch (60 samples, 17.54%)</title><rect x="51.4" y="229" width="207.0" height="15.0" fill="rgb(222,171,2)" rx="2" ry="2" />
<text  x="54.40" y="239.5" >finish_task_switch</text>
</g>
<g >
<title>ktime_get_real_ts64 (4 samples, 1.17%)</title><rect x="1165.8" y="293" width="13.8" height="15.0" fill="rgb(220,128,16)" rx="2" ry="2" />
<text  x="1168.85" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (77 samples, 22.51%)</title><rect x="27.3" y="341" width="265.6" height="15.0" fill="rgb(250,87,20)" rx="2" ry="2" />
<text  x="30.25" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>apparmor_cred_prepare (2 samples, 0.58%)</title><rect x="365.4" y="213" width="6.9" height="15.0" fill="rgb(216,7,25)" rx="2" ry="2" />
<text  x="368.38" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.29%)</title><rect x="1183.1" y="341" width="3.4" height="15.0" fill="rgb(249,156,11)" rx="2" ry="2" />
<text  x="1186.10" y="351.5" ></text>
</g>
<g >
<title>perf_event_task (11 samples, 3.22%)</title><rect x="548.2" y="245" width="38.0" height="15.0" fill="rgb(254,143,1)" rx="2" ry="2" />
<text  x="551.25" y="255.5" >per..</text>
</g>
<g >
<title>memcg_kmem_put_cache (1 samples, 0.29%)</title><rect x="865.7" y="197" width="3.4" height="15.0" fill="rgb(215,224,14)" rx="2" ry="2" />
<text  x="868.67" y="207.5" ></text>
</g>
<g >
<title>new_slab (1 samples, 0.29%)</title><rect x="451.6" y="149" width="3.5" height="15.0" fill="rgb(228,94,22)" rx="2" ry="2" />
<text  x="454.64" y="159.5" ></text>
</g>
<g >
<title>put_ctx (1 samples, 0.29%)</title><rect x="903.6" y="245" width="3.5" height="15.0" fill="rgb(206,149,32)" rx="2" ry="2" />
<text  x="906.63" y="255.5" ></text>
</g>
<g >
<title>freezer_fork (1 samples, 0.29%)</title><rect x="527.5" y="261" width="3.5" height="15.0" fill="rgb(221,78,51)" rx="2" ry="2" />
<text  x="530.54" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.29%)</title><rect x="16.9" y="373" width="3.5" height="15.0" fill="rgb(241,105,35)" rx="2" ry="2" />
<text  x="19.90" y="383.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.29%)</title><rect x="16.9" y="341" width="3.5" height="15.0" fill="rgb(237,24,45)" rx="2" ry="2" />
<text  x="19.90" y="351.5" ></text>
</g>
<g >
<title>thread_group_cputime (2 samples, 0.58%)</title><rect x="286.0" y="213" width="6.9" height="15.0" fill="rgb(209,217,22)" rx="2" ry="2" />
<text  x="289.02" y="223.5" ></text>
</g>
<g >
<title>init_dl_task_timer (1 samples, 0.29%)</title><rect x="917.4" y="229" width="3.5" height="15.0" fill="rgb(253,116,33)" rx="2" ry="2" />
<text  x="920.43" y="239.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.29%)</title><rect x="337.8" y="181" width="3.4" height="15.0" fill="rgb(238,200,44)" rx="2" ry="2" />
<text  x="340.78" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (245 samples, 71.64%)</title><rect x="292.9" y="357" width="845.3" height="15.0" fill="rgb(244,80,39)" rx="2" ry="2" />
<text  x="295.92" y="367.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>mutex_lock (8 samples, 2.34%)</title><rect x="675.9" y="213" width="27.6" height="15.0" fill="rgb(251,115,52)" rx="2" ry="2" />
<text  x="678.91" y="223.5" >m..</text>
</g>
<g >
<title>do_wait (75 samples, 21.93%)</title><rect x="34.2" y="277" width="258.7" height="15.0" fill="rgb(228,188,23)" rx="2" ry="2" />
<text  x="37.15" y="287.5" >do_wait</text>
</g>
<g >
<title>__perf_event_header__init_id.isra.0 (2 samples, 0.58%)</title><rect x="565.5" y="181" width="6.9" height="15.0" fill="rgb(249,21,15)" rx="2" ry="2" />
<text  x="568.50" y="191.5" ></text>
</g>
<g >
<title>cpu_clock_event_init (2 samples, 0.58%)</title><rect x="889.8" y="181" width="6.9" height="15.0" fill="rgb(237,206,7)" rx="2" ry="2" />
<text  x="892.82" y="191.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (11 samples, 3.22%)</title><rect x="465.4" y="213" width="38.0" height="15.0" fill="rgb(216,28,16)" rx="2" ry="2" />
<text  x="468.44" y="223.5" >__a..</text>
</g>
<g >
<title>do_group_exit (1 samples, 0.29%)</title><rect x="1179.6" y="341" width="3.5" height="15.0" fill="rgb(228,189,27)" rx="2" ry="2" />
<text  x="1182.65" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.29%)</title><rect x="1186.5" y="293" width="3.5" height="15.0" fill="rgb(210,196,16)" rx="2" ry="2" />
<text  x="1189.55" y="303.5" ></text>
</g>
<g >
<title>__libc_start_main (324 samples, 94.74%)</title><rect x="20.4" y="389" width="1117.8" height="15.0" fill="rgb(223,98,4)" rx="2" ry="2" />
<text  x="23.35" y="399.5" >__libc_start_main</text>
</g>
<g >
<title>__zone_watermark_ok (1 samples, 0.29%)</title><rect x="793.2" y="53" width="3.5" height="15.0" fill="rgb(209,85,48)" rx="2" ry="2" />
<text  x="796.22" y="63.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.29%)</title><rect x="1183.1" y="373" width="3.4" height="15.0" fill="rgb(222,27,42)" rx="2" ry="2" />
<text  x="1186.10" y="383.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (1 samples, 0.29%)</title><rect x="451.6" y="197" width="3.5" height="15.0" fill="rgb(237,3,31)" rx="2" ry="2" />
<text  x="454.64" y="207.5" ></text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.29%)</title><rect x="862.2" y="181" width="3.5" height="15.0" fill="rgb(245,90,21)" rx="2" ry="2" />
<text  x="865.22" y="191.5" ></text>
</g>
<g >
<title>get_random_u64 (1 samples, 0.29%)</title><rect x="503.4" y="245" width="3.4" height="15.0" fill="rgb(240,223,23)" rx="2" ry="2" />
<text  x="506.39" y="255.5" ></text>
</g>
<g >
<title>put_pid.part.0 (1 samples, 0.29%)</title><rect x="938.1" y="261" width="3.5" height="15.0" fill="rgb(234,88,30)" rx="2" ry="2" />
<text  x="941.13" y="271.5" ></text>
</g>
<g >
<title>allocate_slab (1 samples, 0.29%)</title><rect x="451.6" y="133" width="3.5" height="15.0" fill="rgb(246,141,29)" rx="2" ry="2" />
<text  x="454.64" y="143.5" ></text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.29%)</title><rect x="16.9" y="277" width="3.5" height="15.0" fill="rgb(217,72,54)" rx="2" ry="2" />
<text  x="19.90" y="287.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (12 samples, 3.51%)</title><rect x="1138.2" y="389" width="41.4" height="15.0" fill="rgb(247,47,20)" rx="2" ry="2" />
<text  x="1141.25" y="399.5" >clo..</text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.29%)</title><rect x="327.4" y="229" width="3.5" height="15.0" fill="rgb(212,48,16)" rx="2" ry="2" />
<text  x="330.43" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.29%)</title><rect x="337.8" y="245" width="3.4" height="15.0" fill="rgb(251,125,38)" rx="2" ry="2" />
<text  x="340.78" y="255.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.29%)</title><rect x="572.4" y="165" width="3.4" height="15.0" fill="rgb(221,149,26)" rx="2" ry="2" />
<text  x="575.40" y="175.5" ></text>
</g>
<g >
<title>perf_event_pid_type (1 samples, 0.29%)</title><rect x="575.8" y="181" width="3.5" height="15.0" fill="rgb(224,187,16)" rx="2" ry="2" />
<text  x="578.85" y="191.5" ></text>
</g>
<g >
<title>thread_group_cputime_adjusted (2 samples, 0.58%)</title><rect x="286.0" y="229" width="6.9" height="15.0" fill="rgb(250,63,43)" rx="2" ry="2" />
<text  x="289.02" y="239.5" ></text>
</g>
<g >
<title>copy_fs_struct (1 samples, 0.29%)</title><rect x="372.3" y="261" width="3.4" height="15.0" fill="rgb(254,122,27)" rx="2" ry="2" />
<text  x="375.28" y="271.5" ></text>
</g>
<g >
<title>__init_waitqueue_head (1 samples, 0.29%)</title><rect x="751.8" y="197" width="3.5" height="15.0" fill="rgb(211,46,14)" rx="2" ry="2" />
<text  x="754.81" y="207.5" ></text>
</g>
<g >
<title>lockref_get (1 samples, 0.29%)</title><rect x="372.3" y="245" width="3.4" height="15.0" fill="rgb(240,125,33)" rx="2" ry="2" />
<text  x="375.28" y="255.5" ></text>
</g>
<g >
<title>cgroup_release (1 samples, 0.29%)</title><rect x="282.6" y="213" width="3.4" height="15.0" fill="rgb(225,22,43)" rx="2" ry="2" />
<text  x="285.57" y="223.5" ></text>
</g>
<g >
<title>perf_event_fork (11 samples, 3.22%)</title><rect x="548.2" y="261" width="38.0" height="15.0" fill="rgb(238,126,42)" rx="2" ry="2" />
<text  x="551.25" y="271.5" >per..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.29%)</title><rect x="1186.5" y="325" width="3.5" height="15.0" fill="rgb(238,127,11)" rx="2" ry="2" />
<text  x="1189.55" y="335.5" ></text>
</g>
<g >
<title>perf_event__id_header_size.isra.0 (1 samples, 0.29%)</title><rect x="900.2" y="229" width="3.4" height="15.0" fill="rgb(219,151,35)" rx="2" ry="2" />
<text  x="903.18" y="239.5" ></text>
</g>
<g >
<title>allocate_slab (3 samples, 0.88%)</title><rect x="506.8" y="181" width="10.4" height="15.0" fill="rgb(216,110,19)" rx="2" ry="2" />
<text  x="509.84" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.29%)</title><rect x="1179.6" y="389" width="3.5" height="15.0" fill="rgb(209,99,0)" rx="2" ry="2" />
<text  x="1182.65" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.29%)</title><rect x="1186.5" y="373" width="3.5" height="15.0" fill="rgb(221,18,34)" rx="2" ry="2" />
<text  x="1189.55" y="383.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.29%)</title><rect x="337.8" y="213" width="3.4" height="15.0" fill="rgb(238,47,19)" rx="2" ry="2" />
<text  x="340.78" y="223.5" ></text>
</g>
<g >
<title>__GI___wait4 (79 samples, 23.10%)</title><rect x="20.4" y="373" width="272.5" height="15.0" fill="rgb(217,211,54)" rx="2" ry="2" />
<text  x="23.35" y="383.5" >__GI___wait4</text>
</g>
<g >
<title>init_numa_balancing (1 samples, 0.29%)</title><rect x="920.9" y="229" width="3.4" height="15.0" fill="rgb(236,176,46)" rx="2" ry="2" />
<text  x="923.88" y="239.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.29%)</title><rect x="1186.5" y="341" width="3.5" height="15.0" fill="rgb(233,73,50)" rx="2" ry="2" />
<text  x="1189.55" y="351.5" ></text>
</g>
<g >
<title>rb_next (1 samples, 0.29%)</title><rect x="907.1" y="261" width="3.4" height="15.0" fill="rgb(238,142,31)" rx="2" ry="2" />
<text  x="910.08" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (4 samples, 1.17%)</title><rect x="1165.8" y="325" width="13.8" height="15.0" fill="rgb(208,121,30)" rx="2" ry="2" />
<text  x="1168.85" y="335.5" ></text>
</g>
<g >
<title>alloc_slab_page (20 samples, 5.85%)</title><rect x="786.3" y="117" width="69.0" height="15.0" fill="rgb(214,139,26)" rx="2" ry="2" />
<text  x="789.32" y="127.5" >alloc_s..</text>
</g>
<g >
<title>__slab_alloc (3 samples, 0.88%)</title><rect x="506.8" y="229" width="10.4" height="15.0" fill="rgb(212,40,20)" rx="2" ry="2" />
<text  x="509.84" y="239.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.29%)</title><rect x="16.9" y="325" width="3.5" height="15.0" fill="rgb(243,106,43)" rx="2" ry="2" />
<text  x="19.90" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_wait4 (77 samples, 22.51%)</title><rect x="27.3" y="325" width="265.6" height="15.0" fill="rgb(233,165,13)" rx="2" ry="2" />
<text  x="30.25" y="335.5" >__x64_sys_wait4</text>
</g>
<g >
<title>___slab_alloc (1 samples, 0.29%)</title><rect x="451.6" y="165" width="3.5" height="15.0" fill="rgb(207,150,14)" rx="2" ry="2" />
<text  x="454.64" y="175.5" ></text>
</g>
<g >
<title>alloc_pages_current (11 samples, 3.22%)</title><rect x="465.4" y="229" width="38.0" height="15.0" fill="rgb(249,169,27)" rx="2" ry="2" />
<text  x="468.44" y="239.5" >all..</text>
</g>
<g >
<title>__slab_alloc (24 samples, 7.02%)</title><rect x="779.4" y="181" width="82.8" height="15.0" fill="rgb(233,57,19)" rx="2" ry="2" />
<text  x="782.42" y="191.5" >__slab_al..</text>
</g>
<g >
<title>mod_node_page_state (1 samples, 0.29%)</title><rect x="858.8" y="117" width="3.4" height="15.0" fill="rgb(245,63,9)" rx="2" ry="2" />
<text  x="861.77" y="127.5" ></text>
</g>
<g >
<title>___slab_alloc (3 samples, 0.88%)</title><rect x="506.8" y="213" width="10.4" height="15.0" fill="rgb(233,97,46)" rx="2" ry="2" />
<text  x="509.84" y="223.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.29%)</title><rect x="451.6" y="181" width="3.5" height="15.0" fill="rgb(206,14,48)" rx="2" ry="2" />
<text  x="454.64" y="191.5" ></text>
</g>
<g >
<title>__perf_event__output_id_sample (1 samples, 0.29%)</title><rect x="562.0" y="181" width="3.5" height="15.0" fill="rgb(216,23,46)" rx="2" ry="2" />
<text  x="565.05" y="191.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (1 samples, 0.29%)</title><rect x="1179.6" y="165" width="3.5" height="15.0" fill="rgb(224,183,34)" rx="2" ry="2" />
<text  x="1182.65" y="175.5" ></text>
</g>
<g >
<title>dup_fd (6 samples, 1.75%)</title><rect x="375.7" y="261" width="20.7" height="15.0" fill="rgb(205,52,44)" rx="2" ry="2" />
<text  x="378.73" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.58%)</title><rect x="382.6" y="245" width="6.9" height="15.0" fill="rgb(206,213,22)" rx="2" ry="2" />
<text  x="385.63" y="255.5" ></text>
</g>
<g >
<title>security_prepare_creds (3 samples, 0.88%)</title><rect x="361.9" y="229" width="10.4" height="15.0" fill="rgb(217,34,45)" rx="2" ry="2" />
<text  x="364.93" y="239.5" ></text>
</g>
<g >
<title>cgroup_post_fork (4 samples, 1.17%)</title><rect x="341.2" y="261" width="13.8" height="15.0" fill="rgb(248,125,6)" rx="2" ry="2" />
<text  x="344.23" y="271.5" ></text>
</g>
<g >
<title>mutex_lock (1 samples, 0.29%)</title><rect x="896.7" y="229" width="3.5" height="15.0" fill="rgb(219,131,14)" rx="2" ry="2" />
<text  x="899.73" y="239.5" ></text>
</g>
<g >
<title>dl_main (1 samples, 0.29%)</title><rect x="10.0" y="357" width="3.5" height="15.0" fill="rgb(218,2,32)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>copy_process (183 samples, 53.51%)</title><rect x="299.8" y="277" width="631.4" height="15.0" fill="rgb(208,189,40)" rx="2" ry="2" />
<text  x="302.82" y="287.5" >copy_process</text>
</g>
<g >
<title>get_page_from_freelist (10 samples, 2.92%)</title><rect x="468.9" y="197" width="34.5" height="15.0" fill="rgb(211,160,19)" rx="2" ry="2" />
<text  x="471.89" y="207.5" >ge..</text>
</g>
<g >
<title>__init_misc (1 samples, 0.29%)</title><rect x="16.9" y="389" width="3.5" height="15.0" fill="rgb(212,43,20)" rx="2" ry="2" />
<text  x="19.90" y="399.5" ></text>
</g>
<g >
<title>prep_compound_page (1 samples, 0.29%)</title><rect x="845.0" y="37" width="3.4" height="15.0" fill="rgb(222,37,39)" rx="2" ry="2" />
<text  x="847.97" y="47.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.29%)</title><rect x="1186.5" y="309" width="3.5" height="15.0" fill="rgb(211,114,21)" rx="2" ry="2" />
<text  x="1189.55" y="319.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (10 samples, 2.92%)</title><rect x="551.7" y="213" width="34.5" height="15.0" fill="rgb(233,35,4)" rx="2" ry="2" />
<text  x="554.70" y="223.5" >pe..</text>
</g>
<g >
<title>pids_cancel.constprop.0 (1 samples, 0.29%)</title><rect x="282.6" y="181" width="3.4" height="15.0" fill="rgb(246,158,30)" rx="2" ry="2" />
<text  x="285.57" y="191.5" ></text>
</g>
<g >
<title>sched_clock_cpu (2 samples, 0.58%)</title><rect x="565.5" y="149" width="6.9" height="15.0" fill="rgb(237,180,54)" rx="2" ry="2" />
<text  x="568.50" y="159.5" ></text>
</g>
<g >
<title>release_task (6 samples, 1.75%)</title><rect x="265.3" y="229" width="20.7" height="15.0" fill="rgb(236,18,19)" rx="2" ry="2" />
<text  x="268.32" y="239.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 0.29%)</title><rect x="10.0" y="341" width="3.5" height="15.0" fill="rgb(243,138,35)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>__clone (245 samples, 71.64%)</title><rect x="292.9" y="373" width="845.3" height="15.0" fill="rgb(245,204,27)" rx="2" ry="2" />
<text  x="295.92" y="383.5" >__clone</text>
</g>
<g >
<title>local_clock (2 samples, 0.58%)</title><rect x="565.5" y="165" width="6.9" height="15.0" fill="rgb(216,220,10)" rx="2" ry="2" />
<text  x="568.50" y="175.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.29%)</title><rect x="845.0" y="53" width="3.4" height="15.0" fill="rgb(220,144,17)" rx="2" ry="2" />
<text  x="847.97" y="63.5" ></text>
</g>
<g >
<title>rmqueue (2 samples, 0.58%)</title><rect x="510.3" y="101" width="6.9" height="15.0" fill="rgb(242,187,34)" rx="2" ry="2" />
<text  x="513.29" y="111.5" ></text>
</g>
<g >
<title>ldt_arch_exit_mmap (1 samples, 0.29%)</title><rect x="1179.6" y="277" width="3.5" height="15.0" fill="rgb(251,212,18)" rx="2" ry="2" />
<text  x="1182.65" y="287.5" ></text>
</g>
<g >
<title>__sched_fork (2 samples, 0.58%)</title><rect x="917.4" y="245" width="6.9" height="15.0" fill="rgb(231,40,1)" rx="2" ry="2" />
<text  x="920.43" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (245 samples, 71.64%)</title><rect x="292.9" y="341" width="845.3" height="15.0" fill="rgb(247,57,6)" rx="2" ry="2" />
<text  x="295.92" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>perf_event_alloc (56 samples, 16.37%)</title><rect x="703.5" y="213" width="193.2" height="15.0" fill="rgb(253,92,25)" rx="2" ry="2" />
<text  x="706.51" y="223.5" >perf_event_alloc</text>
</g>
<g >
<title>new_slab (3 samples, 0.88%)</title><rect x="506.8" y="197" width="10.4" height="15.0" fill="rgb(228,178,53)" rx="2" ry="2" />
<text  x="509.84" y="207.5" ></text>
</g>
<g >
<title>perf_event_task_output (8 samples, 2.34%)</title><rect x="558.6" y="197" width="27.6" height="15.0" fill="rgb(211,91,10)" rx="2" ry="2" />
<text  x="561.60" y="207.5" >p..</text>
</g>
<g >
<title>kvm_sched_clock_read (2 samples, 0.58%)</title><rect x="565.5" y="101" width="6.9" height="15.0" fill="rgb(206,185,19)" rx="2" ry="2" />
<text  x="568.50" y="111.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (1 samples, 0.29%)</title><rect x="1179.6" y="197" width="3.5" height="15.0" fill="rgb(239,129,6)" rx="2" ry="2" />
<text  x="1182.65" y="207.5" ></text>
</g>
<g >
<title>sched_clock_local (2 samples, 0.58%)</title><rect x="565.5" y="133" width="6.9" height="15.0" fill="rgb(226,181,53)" rx="2" ry="2" />
<text  x="568.50" y="143.5" ></text>
</g>
<g >
<title>local_clock (1 samples, 0.29%)</title><rect x="572.4" y="181" width="3.4" height="15.0" fill="rgb(230,12,49)" rx="2" ry="2" />
<text  x="575.40" y="191.5" ></text>
</g>
<g >
<title>my_clone (342 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(227,57,48)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >my_clone</text>
</g>
<g >
<title>alloc_slab_page (3 samples, 0.88%)</title><rect x="506.8" y="165" width="10.4" height="15.0" fill="rgb(253,198,30)" rx="2" ry="2" />
<text  x="509.84" y="175.5" ></text>
</g>
<g >
<title>__schedule (61 samples, 17.84%)</title><rect x="48.0" y="245" width="210.4" height="15.0" fill="rgb(205,124,33)" rx="2" ry="2" />
<text  x="50.95" y="255.5" >__schedule</text>
</g>
<g >
<title>arch_local_irq_enable (2 samples, 0.58%)</title><rect x="330.9" y="261" width="6.9" height="15.0" fill="rgb(237,56,3)" rx="2" ry="2" />
<text  x="333.88" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.58%)</title><rect x="355.0" y="229" width="6.9" height="15.0" fill="rgb(248,119,30)" rx="2" ry="2" />
<text  x="358.03" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 2.05%)</title><rect x="1155.5" y="357" width="24.1" height="15.0" fill="rgb(248,201,11)" rx="2" ry="2" />
<text  x="1158.50" y="367.5" >e..</text>
</g>
<g >
<title>do_exit (1 samples, 0.29%)</title><rect x="1179.6" y="325" width="3.5" height="15.0" fill="rgb(219,204,6)" rx="2" ry="2" />
<text  x="1182.65" y="335.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.29%)</title><rect x="572.4" y="149" width="3.4" height="15.0" fill="rgb(247,193,47)" rx="2" ry="2" />
<text  x="575.40" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.58%)</title><rect x="458.5" y="229" width="6.9" height="15.0" fill="rgb(240,45,32)" rx="2" ry="2" />
<text  x="461.54" y="239.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.29%)</title><rect x="1183.1" y="277" width="3.4" height="15.0" fill="rgb(208,56,14)" rx="2" ry="2" />
<text  x="1186.10" y="287.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (4 samples, 1.17%)</title><rect x="1165.8" y="277" width="13.8" height="15.0" fill="rgb(247,34,38)" rx="2" ry="2" />
<text  x="1168.85" y="287.5" ></text>
</g>
<g >
<title>lsm_task_alloc (2 samples, 0.58%)</title><rect x="924.3" y="245" width="6.9" height="15.0" fill="rgb(205,16,1)" rx="2" ry="2" />
<text  x="927.33" y="255.5" ></text>
</g>
<g >
<title>__srcu_read_unlock (2 samples, 0.58%)</title><rect x="765.6" y="197" width="6.9" height="15.0" fill="rgb(236,40,46)" rx="2" ry="2" />
<text  x="768.61" y="207.5" ></text>
</g>
<g >
<title>clear_page_erms (14 samples, 4.09%)</title><rect x="796.7" y="53" width="48.3" height="15.0" fill="rgb(242,60,51)" rx="2" ry="2" />
<text  x="799.67" y="63.5" >clea..</text>
</g>
<g >
<title>posix_cputimers_group_init (1 samples, 0.29%)</title><rect x="934.7" y="277" width="3.4" height="15.0" fill="rgb(246,201,9)" rx="2" ry="2" />
<text  x="937.68" y="287.5" ></text>
</g>
<g >
<title>__lock_text_start (4 samples, 1.17%)</title><rect x="341.2" y="229" width="13.8" height="15.0" fill="rgb(237,146,21)" rx="2" ry="2" />
<text  x="344.23" y="239.5" ></text>
</g>
<g >
<title>wait_consider_task (10 samples, 2.92%)</title><rect x="258.4" y="261" width="34.5" height="15.0" fill="rgb(211,188,10)" rx="2" ry="2" />
<text  x="261.42" y="271.5" >wa..</text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="503.4" y="229" width="3.4" height="15.0" fill="rgb(227,86,50)" rx="2" ry="2" />
<text  x="506.39" y="239.5" ></text>
</g>
<g >
<title>get_common_indices.constprop.0 (1 samples, 0.29%)</title><rect x="13.5" y="373" width="3.4" height="15.0" fill="rgb(245,24,53)" rx="2" ry="2" />
<text  x="16.45" y="383.5" ></text>
</g>
<g >
<title>insert_vmap_area_augment.constprop.0 (1 samples, 0.29%)</title><rect x="448.2" y="197" width="3.4" height="15.0" fill="rgb(215,34,11)" rx="2" ry="2" />
<text  x="451.19" y="207.5" ></text>
</g>
<g >
<title>rmqueue (2 samples, 0.58%)</title><rect x="848.4" y="53" width="6.9" height="15.0" fill="rgb(231,40,50)" rx="2" ry="2" />
<text  x="851.42" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 2.05%)</title><rect x="1155.5" y="341" width="24.1" height="15.0" fill="rgb(245,203,43)" rx="2" ry="2" />
<text  x="1158.50" y="351.5" >d..</text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.29%)</title><rect x="41.1" y="261" width="3.4" height="15.0" fill="rgb(234,106,18)" rx="2" ry="2" />
<text  x="44.05" y="271.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.29%)</title><rect x="927.8" y="213" width="3.4" height="15.0" fill="rgb(208,74,14)" rx="2" ry="2" />
<text  x="930.78" y="223.5" ></text>
</g>
<g >
<title>__srcu_read_lock (3 samples, 0.88%)</title><rect x="755.3" y="197" width="10.3" height="15.0" fill="rgb(253,31,16)" rx="2" ry="2" />
<text  x="758.26" y="207.5" ></text>
</g>
<g >
<title>hrtimer_init (1 samples, 0.29%)</title><rect x="531.0" y="261" width="3.4" height="15.0" fill="rgb(244,113,50)" rx="2" ry="2" />
<text  x="533.99" y="271.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.29%)</title><rect x="337.8" y="197" width="3.4" height="15.0" fill="rgb(215,23,36)" rx="2" ry="2" />
<text  x="340.78" y="207.5" ></text>
</g>
<g >
<title>schedule (62 samples, 18.13%)</title><rect x="44.5" y="261" width="213.9" height="15.0" fill="rgb(222,123,30)" rx="2" ry="2" />
<text  x="47.50" y="271.5" >schedule</text>
</g>
<g >
<title>sched_fork (4 samples, 1.17%)</title><rect x="910.5" y="261" width="13.8" height="15.0" fill="rgb(221,99,22)" rx="2" ry="2" />
<text  x="913.53" y="271.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.29%)</title><rect x="386.1" y="229" width="3.4" height="15.0" fill="rgb(214,3,8)" rx="2" ry="2" />
<text  x="389.08" y="239.5" ></text>
</g>
<g >
<title>perf_swevent_init_hrtimer (2 samples, 0.58%)</title><rect x="889.8" y="165" width="6.9" height="15.0" fill="rgb(228,90,6)" rx="2" ry="2" />
<text  x="892.82" y="175.5" ></text>
</g>
<g >
<title>insert_vmap_area.constprop.0 (1 samples, 0.29%)</title><rect x="444.7" y="197" width="3.5" height="15.0" fill="rgb(238,72,42)" rx="2" ry="2" />
<text  x="447.74" y="207.5" ></text>
</g>
<g >
<title>get_random_u32 (1 samples, 0.29%)</title><rect x="855.3" y="117" width="3.5" height="15.0" fill="rgb(243,22,42)" rx="2" ry="2" />
<text  x="858.32" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.29%)</title><rect x="1183.1" y="357" width="3.4" height="15.0" fill="rgb(215,65,9)" rx="2" ry="2" />
<text  x="1186.10" y="367.5" ></text>
</g>
<g >
<title>free_ldt_pgtables (1 samples, 0.29%)</title><rect x="1179.6" y="261" width="3.5" height="15.0" fill="rgb(226,173,48)" rx="2" ry="2" />
<text  x="1182.65" y="271.5" ></text>
</g>
<g >
<title>alloc_set_pte (1 samples, 0.29%)</title><rect x="16.9" y="261" width="3.5" height="15.0" fill="rgb(209,33,24)" rx="2" ry="2" />
<text  x="19.90" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (3 samples, 0.88%)</title><rect x="506.8" y="245" width="10.4" height="15.0" fill="rgb(205,29,38)" rx="2" ry="2" />
<text  x="509.84" y="255.5" ></text>
</g>
<g >
<title>memset_erms (1 samples, 0.29%)</title><rect x="455.1" y="213" width="3.4" height="15.0" fill="rgb(246,59,13)" rx="2" ry="2" />
<text  x="458.09" y="223.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.29%)</title><rect x="544.8" y="261" width="3.4" height="15.0" fill="rgb(206,175,19)" rx="2" ry="2" />
<text  x="547.80" y="271.5" ></text>
</g>
<g >
<title>___slab_alloc (24 samples, 7.02%)</title><rect x="779.4" y="165" width="82.8" height="15.0" fill="rgb(209,113,37)" rx="2" ry="2" />
<text  x="782.42" y="175.5" >___slab_a..</text>
</g>
<g >
<title>__lock_text_start (7 samples, 2.05%)</title><rect x="631.1" y="213" width="24.1" height="15.0" fill="rgb(208,37,35)" rx="2" ry="2" />
<text  x="634.05" y="223.5" >_..</text>
</g>
<g >
<title>posix_get_realtime_timespec (4 samples, 1.17%)</title><rect x="1165.8" y="309" width="13.8" height="15.0" fill="rgb(239,61,25)" rx="2" ry="2" />
<text  x="1168.85" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.29%)</title><rect x="1179.6" y="373" width="3.5" height="15.0" fill="rgb(234,21,21)" rx="2" ry="2" />
<text  x="1182.65" y="383.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.29%)</title><rect x="1179.6" y="229" width="3.5" height="15.0" fill="rgb(241,61,33)" rx="2" ry="2" />
<text  x="1182.65" y="239.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="855.3" y="101" width="3.5" height="15.0" fill="rgb(213,118,20)" rx="2" ry="2" />
<text  x="858.32" y="111.5" ></text>
</g>
<g >
<title>perf_output_begin (2 samples, 0.58%)</title><rect x="579.3" y="181" width="6.9" height="15.0" fill="rgb(237,40,42)" rx="2" ry="2" />
<text  x="582.30" y="191.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.29%)</title><rect x="10.0" y="373" width="3.5" height="15.0" fill="rgb(210,99,35)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.29%)</title><rect x="1179.6" y="357" width="3.5" height="15.0" fill="rgb(206,77,6)" rx="2" ry="2" />
<text  x="1182.65" y="367.5" ></text>
</g>
<g >
<title>wait_task_zombie (10 samples, 2.92%)</title><rect x="258.4" y="245" width="34.5" height="15.0" fill="rgb(243,133,53)" rx="2" ry="2" />
<text  x="261.42" y="255.5" >wa..</text>
</g>
<g >
<title>inherit_task_group.isra.0.part.0 (90 samples, 26.32%)</title><rect x="593.1" y="245" width="310.5" height="15.0" fill="rgb(238,58,22)" rx="2" ry="2" />
<text  x="596.10" y="255.5" >inherit_task_group.isra.0.part.0</text>
</g>
<g >
<title>__lock_text_start (57 samples, 16.67%)</title><rect x="941.6" y="261" width="196.6" height="15.0" fill="rgb(219,19,0)" rx="2" ry="2" />
<text  x="944.58" y="271.5" >__lock_text_start</text>
</g>
<g >
<title>__kmalloc (2 samples, 0.58%)</title><rect x="924.3" y="229" width="6.9" height="15.0" fill="rgb(213,70,33)" rx="2" ry="2" />
<text  x="927.33" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (1 samples, 0.29%)</title><rect x="296.4" y="277" width="3.4" height="15.0" fill="rgb(235,176,26)" rx="2" ry="2" />
<text  x="299.37" y="287.5" ></text>
</g>
<g >
<title>__mutex_init (6 samples, 1.75%)</title><rect x="655.2" y="213" width="20.7" height="15.0" fill="rgb(254,109,39)" rx="2" ry="2" />
<text  x="658.20" y="223.5" ></text>
</g>
<g >
<title>get_task_pid (1 samples, 0.29%)</title><rect x="931.2" y="277" width="3.5" height="15.0" fill="rgb(250,222,28)" rx="2" ry="2" />
<text  x="934.23" y="287.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (10 samples, 2.92%)</title><rect x="1145.1" y="373" width="34.5" height="15.0" fill="rgb(225,203,15)" rx="2" ry="2" />
<text  x="1148.15" y="383.5" >__..</text>
</g>
<g >
<title>__delayacct_tsk_init (1 samples, 0.29%)</title><rect x="303.3" y="261" width="3.4" height="15.0" fill="rgb(211,100,52)" rx="2" ry="2" />
<text  x="306.27" y="271.5" ></text>
</g>
<g >
<title>smp_call_function_many (1 samples, 0.29%)</title><rect x="1179.6" y="181" width="3.5" height="15.0" fill="rgb(253,176,5)" rx="2" ry="2" />
<text  x="1182.65" y="191.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (3 samples, 0.88%)</title><rect x="534.4" y="261" width="10.4" height="15.0" fill="rgb(238,193,39)" rx="2" ry="2" />
<text  x="537.44" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_clone (244 samples, 71.35%)</title><rect x="296.4" y="325" width="841.8" height="15.0" fill="rgb(222,13,48)" rx="2" ry="2" />
<text  x="299.37" y="335.5" >__x64_sys_clone</text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.29%)</title><rect x="544.8" y="245" width="3.4" height="15.0" fill="rgb(216,144,15)" rx="2" ry="2" />
<text  x="547.80" y="255.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.29%)</title><rect x="506.8" y="101" width="3.5" height="15.0" fill="rgb(206,21,10)" rx="2" ry="2" />
<text  x="509.84" y="111.5" ></text>
</g>
<g >
<title>kernel_wait4 (77 samples, 22.51%)</title><rect x="27.3" y="293" width="265.6" height="15.0" fill="rgb(241,12,25)" rx="2" ry="2" />
<text  x="30.25" y="303.5" >kernel_wait4</text>
</g>
<g >
<title>__memcg_kmem_charge (6 samples, 1.75%)</title><rect x="399.9" y="229" width="20.7" height="15.0" fill="rgb(242,158,54)" rx="2" ry="2" />
<text  x="402.88" y="239.5" ></text>
</g>
<g >
<title>alloc_pages_current (3 samples, 0.88%)</title><rect x="506.8" y="149" width="10.4" height="15.0" fill="rgb(214,140,54)" rx="2" ry="2" />
<text  x="509.84" y="159.5" ></text>
</g>
<g >
<title>cpu_cgroup_fork (4 samples, 1.17%)</title><rect x="341.2" y="245" width="13.8" height="15.0" fill="rgb(252,69,49)" rx="2" ry="2" />
<text  x="344.23" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (77 samples, 22.51%)</title><rect x="27.3" y="357" width="265.6" height="15.0" fill="rgb(228,168,9)" rx="2" ry="2" />
<text  x="30.25" y="367.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>clear_page_erms (6 samples, 1.75%)</title><rect x="472.3" y="181" width="20.7" height="15.0" fill="rgb(236,53,19)" rx="2" ry="2" />
<text  x="475.34" y="191.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.29%)</title><rect x="16.9" y="357" width="3.5" height="15.0" fill="rgb(244,135,47)" rx="2" ry="2" />
<text  x="19.90" y="367.5" ></text>
</g>
<g >
<title>sysmalloc (1 samples, 0.29%)</title><rect x="1186.5" y="389" width="3.5" height="15.0" fill="rgb(235,123,45)" rx="2" ry="2" />
<text  x="1189.55" y="399.5" ></text>
</g>
<g >
<title>vma_merge (1 samples, 0.29%)</title><rect x="1183.1" y="261" width="3.4" height="15.0" fill="rgb(235,48,44)" rx="2" ry="2" />
<text  x="1186.10" y="271.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.29%)</title><rect x="1179.6" y="245" width="3.5" height="15.0" fill="rgb(208,114,48)" rx="2" ry="2" />
<text  x="1182.65" y="255.5" ></text>
</g>
<g >
<title>new_slab (24 samples, 7.02%)</title><rect x="779.4" y="149" width="82.8" height="15.0" fill="rgb(217,10,45)" rx="2" ry="2" />
<text  x="782.42" y="159.5" >new_slab</text>
</g>
<g >
<title>__alloc_pages_nodemask (20 samples, 5.85%)</title><rect x="786.3" y="85" width="69.0" height="15.0" fill="rgb(212,211,19)" rx="2" ry="2" />
<text  x="789.32" y="95.5" >__alloc..</text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.29%)</title><rect x="337.8" y="229" width="3.4" height="15.0" fill="rgb(231,85,8)" rx="2" ry="2" />
<text  x="340.78" y="239.5" ></text>
</g>
<g >
<title>allocate_slab (24 samples, 7.02%)</title><rect x="779.4" y="133" width="82.8" height="15.0" fill="rgb(211,45,13)" rx="2" ry="2" />
<text  x="782.42" y="143.5" >allocate_..</text>
</g>
</g>
</svg>
