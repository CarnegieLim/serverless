<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>wait_task_zombie (19 samples, 5.43%)</title><rect x="219.0" y="229" width="64.1" height="15.0" fill="rgb(230,101,39)" rx="2" ry="2" />
<text  x="222.03" y="239.5" >wait_ta..</text>
</g>
<g >
<title>alloc_vmap_area (7 samples, 2.00%)</title><rect x="428.1" y="197" width="23.6" height="15.0" fill="rgb(241,49,20)" rx="2" ry="2" />
<text  x="431.06" y="207.5" >a..</text>
</g>
<g >
<title>dl_main (1 samples, 0.29%)</title><rect x="10.0" y="341" width="3.4" height="15.0" fill="rgb(206,132,52)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.29%)</title><rect x="16.7" y="357" width="3.4" height="15.0" fill="rgb(210,109,47)" rx="2" ry="2" />
<text  x="19.74" y="367.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.29%)</title><rect x="10.0" y="357" width="3.4" height="15.0" fill="rgb(225,56,0)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.29%)</title><rect x="1183.3" y="293" width="3.3" height="15.0" fill="rgb(224,4,47)" rx="2" ry="2" />
<text  x="1186.26" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (76 samples, 21.71%)</title><rect x="26.9" y="341" width="256.2" height="15.0" fill="rgb(235,26,51)" rx="2" ry="2" />
<text  x="29.86" y="351.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>apparmor_cred_prepare (1 samples, 0.29%)</title><rect x="364.0" y="213" width="3.4" height="15.0" fill="rgb(246,107,39)" rx="2" ry="2" />
<text  x="367.00" y="223.5" ></text>
</g>
<g >
<title>__slab_alloc (42 samples, 12.00%)</title><rect x="751.7" y="165" width="141.6" height="15.0" fill="rgb(246,174,5)" rx="2" ry="2" />
<text  x="754.71" y="175.5" >__slab_alloc</text>
</g>
<g >
<title>security_perf_event_alloc (1 samples, 0.29%)</title><rect x="913.5" y="181" width="3.4" height="15.0" fill="rgb(221,21,28)" rx="2" ry="2" />
<text  x="916.54" y="191.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.29%)</title><rect x="691.0" y="149" width="3.4" height="15.0" fill="rgb(241,4,26)" rx="2" ry="2" />
<text  x="694.03" y="159.5" ></text>
</g>
<g >
<title>memset_erms (1 samples, 0.29%)</title><rect x="498.9" y="213" width="3.3" height="15.0" fill="rgb(205,64,48)" rx="2" ry="2" />
<text  x="501.86" y="223.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (3 samples, 0.86%)</title><rect x="535.9" y="229" width="10.2" height="15.0" fill="rgb(213,127,40)" rx="2" ry="2" />
<text  x="538.94" y="239.5" ></text>
</g>
<g >
<title>get_page_from_freelist (7 samples, 2.00%)</title><rect x="465.1" y="181" width="23.6" height="15.0" fill="rgb(223,22,48)" rx="2" ry="2" />
<text  x="468.14" y="191.5" >g..</text>
</g>
<g >
<title>get_page_from_freelist (38 samples, 10.86%)</title><rect x="765.2" y="53" width="128.1" height="15.0" fill="rgb(244,157,36)" rx="2" ry="2" />
<text  x="768.20" y="63.5" >get_page_from_fr..</text>
</g>
<g >
<title>my_clone (350 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(243,93,49)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >my_clone</text>
</g>
<g >
<title>user_disable_single_step (1 samples, 0.29%)</title><rect x="960.7" y="245" width="3.4" height="15.0" fill="rgb(222,52,39)" rx="2" ry="2" />
<text  x="963.74" y="255.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="505.6" y="213" width="3.4" height="15.0" fill="rgb(206,69,52)" rx="2" ry="2" />
<text  x="508.60" y="223.5" ></text>
</g>
<g >
<title>mutex_lock (7 samples, 2.00%)</title><rect x="670.8" y="197" width="23.6" height="15.0" fill="rgb(249,166,10)" rx="2" ry="2" />
<text  x="673.80" y="207.5" >m..</text>
</g>
<g >
<title>__radix_tree_preload (1 samples, 0.29%)</title><rect x="323.5" y="213" width="3.4" height="15.0" fill="rgb(209,141,9)" rx="2" ry="2" />
<text  x="326.54" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.29%)</title><rect x="10.0" y="261" width="3.4" height="15.0" fill="rgb(217,12,14)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>try_charge (2 samples, 0.57%)</title><rect x="421.3" y="197" width="6.8" height="15.0" fill="rgb(212,43,24)" rx="2" ry="2" />
<text  x="424.31" y="207.5" ></text>
</g>
<g >
<title>new_slab (41 samples, 11.71%)</title><rect x="755.1" y="133" width="138.2" height="15.0" fill="rgb(236,23,42)" rx="2" ry="2" />
<text  x="758.09" y="143.5" >new_slab</text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.29%)</title><rect x="1149.5" y="341" width="3.4" height="15.0" fill="rgb(246,19,25)" rx="2" ry="2" />
<text  x="1152.54" y="351.5" ></text>
</g>
<g >
<title>allocate_slab (1 samples, 0.29%)</title><rect x="529.2" y="181" width="3.4" height="15.0" fill="rgb(251,32,33)" rx="2" ry="2" />
<text  x="532.20" y="191.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (3 samples, 0.86%)</title><rect x="525.8" y="245" width="10.1" height="15.0" fill="rgb(248,188,6)" rx="2" ry="2" />
<text  x="528.83" y="255.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.29%)</title><rect x="586.5" y="117" width="3.4" height="15.0" fill="rgb(223,54,1)" rx="2" ry="2" />
<text  x="589.51" y="127.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.29%)</title><rect x="529.2" y="101" width="3.4" height="15.0" fill="rgb(253,60,39)" rx="2" ry="2" />
<text  x="532.20" y="111.5" ></text>
</g>
<g >
<title>perf_event_fork (9 samples, 2.57%)</title><rect x="559.5" y="245" width="30.4" height="15.0" fill="rgb(232,114,41)" rx="2" ry="2" />
<text  x="562.54" y="255.5" >pe..</text>
</g>
<g >
<title>__cxa_atexit (1 samples, 0.29%)</title><rect x="16.7" y="373" width="3.4" height="15.0" fill="rgb(226,61,45)" rx="2" ry="2" />
<text  x="19.74" y="383.5" ></text>
</g>
<g >
<title>mmap64 (1 samples, 0.29%)</title><rect x="1186.6" y="373" width="3.4" height="15.0" fill="rgb(222,14,9)" rx="2" ry="2" />
<text  x="1189.63" y="383.5" ></text>
</g>
<g >
<title>cpu_cgroup_fork (2 samples, 0.57%)</title><rect x="357.3" y="229" width="6.7" height="15.0" fill="rgb(214,156,11)" rx="2" ry="2" />
<text  x="360.26" y="239.5" ></text>
</g>
<g >
<title>sched_clock_local (1 samples, 0.29%)</title><rect x="586.5" y="133" width="3.4" height="15.0" fill="rgb(235,190,53)" rx="2" ry="2" />
<text  x="589.51" y="143.5" ></text>
</g>
<g >
<title>__get_vm_area_node (7 samples, 2.00%)</title><rect x="428.1" y="213" width="23.6" height="15.0" fill="rgb(218,117,3)" rx="2" ry="2" />
<text  x="431.06" y="223.5" >_..</text>
</g>
<g >
<title>memset_erms (3 samples, 0.86%)</title><rect x="896.7" y="181" width="10.1" height="15.0" fill="rgb(248,121,31)" rx="2" ry="2" />
<text  x="899.69" y="191.5" ></text>
</g>
<g >
<title>__perf_event_header__init_id.isra.0 (3 samples, 0.86%)</title><rect x="576.4" y="165" width="10.1" height="15.0" fill="rgb(233,211,20)" rx="2" ry="2" />
<text  x="579.40" y="175.5" ></text>
</g>
<g >
<title>kvm_sched_clock_read (2 samples, 0.57%)</title><rect x="579.8" y="85" width="6.7" height="15.0" fill="rgb(240,124,1)" rx="2" ry="2" />
<text  x="582.77" y="95.5" ></text>
</g>
<g >
<title>cpu_clock_event_init (1 samples, 0.29%)</title><rect x="910.2" y="165" width="3.3" height="15.0" fill="rgb(227,84,24)" rx="2" ry="2" />
<text  x="913.17" y="175.5" ></text>
</g>
<g >
<title>insert_vmap_area.constprop.0 (2 samples, 0.57%)</title><rect x="438.2" y="181" width="6.7" height="15.0" fill="rgb(235,45,9)" rx="2" ry="2" />
<text  x="441.17" y="191.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.29%)</title><rect x="586.5" y="149" width="3.4" height="15.0" fill="rgb(227,50,43)" rx="2" ry="2" />
<text  x="589.51" y="159.5" ></text>
</g>
<g >
<title>find_vmap_area (1 samples, 0.29%)</title><rect x="502.2" y="229" width="3.4" height="15.0" fill="rgb(225,102,33)" rx="2" ry="2" />
<text  x="505.23" y="239.5" ></text>
</g>
<g >
<title>__lock_text_start (4 samples, 1.14%)</title><rect x="937.1" y="229" width="13.5" height="15.0" fill="rgb(233,11,11)" rx="2" ry="2" />
<text  x="940.14" y="239.5" ></text>
</g>
<g >
<title>mutex_unlock (1 samples, 0.29%)</title><rect x="916.9" y="213" width="3.4" height="15.0" fill="rgb(220,201,46)" rx="2" ry="2" />
<text  x="919.91" y="223.5" ></text>
</g>
<g >
<title>path_get (1 samples, 0.29%)</title><rect x="377.5" y="229" width="3.4" height="15.0" fill="rgb(248,154,14)" rx="2" ry="2" />
<text  x="380.49" y="239.5" ></text>
</g>
<g >
<title>do_wait (76 samples, 21.71%)</title><rect x="26.9" y="261" width="256.2" height="15.0" fill="rgb(219,66,25)" rx="2" ry="2" />
<text  x="29.86" y="271.5" >do_wait</text>
</g>
<g >
<title>__memcg_kmem_charge_page (6 samples, 1.71%)</title><rect x="407.8" y="229" width="20.3" height="15.0" fill="rgb(213,61,16)" rx="2" ry="2" />
<text  x="410.83" y="239.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.29%)</title><rect x="16.7" y="341" width="3.4" height="15.0" fill="rgb(227,167,37)" rx="2" ry="2" />
<text  x="19.74" y="351.5" ></text>
</g>
<g >
<title>preempt_schedule_common (1 samples, 0.29%)</title><rect x="691.0" y="165" width="3.4" height="15.0" fill="rgb(253,104,46)" rx="2" ry="2" />
<text  x="694.03" y="175.5" ></text>
</g>
<g >
<title>clear_page_erms (34 samples, 9.71%)</title><rect x="765.2" y="37" width="114.6" height="15.0" fill="rgb(208,170,52)" rx="2" ry="2" />
<text  x="768.20" y="47.5" >clear_page_erms</text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="357.3" y="213" width="3.3" height="15.0" fill="rgb(208,150,21)" rx="2" ry="2" />
<text  x="360.26" y="223.5" ></text>
</g>
<g >
<title>arch_dup_task_struct (1 samples, 0.29%)</title><rect x="498.9" y="229" width="3.3" height="15.0" fill="rgb(210,175,53)" rx="2" ry="2" />
<text  x="501.86" y="239.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.29%)</title><rect x="529.2" y="229" width="3.4" height="15.0" fill="rgb(245,171,37)" rx="2" ry="2" />
<text  x="532.20" y="239.5" ></text>
</g>
<g >
<title>memset_erms (1 samples, 0.29%)</title><rect x="556.2" y="245" width="3.3" height="15.0" fill="rgb(253,78,48)" rx="2" ry="2" />
<text  x="559.17" y="255.5" ></text>
</g>
<g >
<title>perf_try_init_event (2 samples, 0.57%)</title><rect x="906.8" y="181" width="6.7" height="15.0" fill="rgb(237,13,18)" rx="2" ry="2" />
<text  x="909.80" y="191.5" ></text>
</g>
<g >
<title>kernel_poison_pages (1 samples, 0.29%)</title><rect x="879.8" y="37" width="3.4" height="15.0" fill="rgb(250,226,15)" rx="2" ry="2" />
<text  x="882.83" y="47.5" ></text>
</g>
<g >
<title>__delayacct_tsk_init (1 samples, 0.29%)</title><rect x="313.4" y="245" width="3.4" height="15.0" fill="rgb(217,201,1)" rx="2" ry="2" />
<text  x="316.43" y="255.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.57%)</title><rect x="326.9" y="229" width="6.8" height="15.0" fill="rgb(252,81,24)" rx="2" ry="2" />
<text  x="329.91" y="239.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.29%)</title><rect x="883.2" y="37" width="3.4" height="15.0" fill="rgb(232,60,7)" rx="2" ry="2" />
<text  x="886.20" y="47.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_trace (45 samples, 12.86%)</title><rect x="745.0" y="181" width="151.7" height="15.0" fill="rgb(215,225,10)" rx="2" ry="2" />
<text  x="747.97" y="191.5" >kmem_cache_alloc_tr..</text>
</g>
<g >
<title>memcpy_erms (1 samples, 0.29%)</title><rect x="573.0" y="149" width="3.4" height="15.0" fill="rgb(224,17,30)" rx="2" ry="2" />
<text  x="576.03" y="159.5" ></text>
</g>
<g >
<title>main (3 samples, 0.86%)</title><rect x="1142.8" y="357" width="10.1" height="15.0" fill="rgb(205,223,11)" rx="2" ry="2" />
<text  x="1145.80" y="367.5" ></text>
</g>
<g >
<title>finish_task_switch (55 samples, 15.71%)</title><rect x="30.2" y="213" width="185.5" height="15.0" fill="rgb(212,23,36)" rx="2" ry="2" />
<text  x="33.23" y="223.5" >finish_task_switch</text>
</g>
<g >
<title>alloc_pages_current (11 samples, 3.14%)</title><rect x="451.7" y="213" width="37.0" height="15.0" fill="rgb(216,127,8)" rx="2" ry="2" />
<text  x="454.66" y="223.5" >all..</text>
</g>
<g >
<title>dup_fd (2 samples, 0.57%)</title><rect x="394.3" y="245" width="6.8" height="15.0" fill="rgb(214,187,40)" rx="2" ry="2" />
<text  x="397.34" y="255.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.29%)</title><rect x="1186.6" y="261" width="3.4" height="15.0" fill="rgb(210,30,44)" rx="2" ry="2" />
<text  x="1189.63" y="271.5" ></text>
</g>
<g >
<title>__init_waitqueue_head (1 samples, 0.29%)</title><rect x="633.7" y="197" width="3.4" height="15.0" fill="rgb(254,26,43)" rx="2" ry="2" />
<text  x="636.71" y="207.5" ></text>
</g>
<g >
<title>rb_next (4 samples, 1.14%)</title><rect x="923.7" y="245" width="13.4" height="15.0" fill="rgb(232,136,42)" rx="2" ry="2" />
<text  x="926.66" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.29%)</title><rect x="360.6" y="197" width="3.4" height="15.0" fill="rgb(237,72,50)" rx="2" ry="2" />
<text  x="363.63" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.29%)</title><rect x="1186.6" y="357" width="3.4" height="15.0" fill="rgb(245,55,32)" rx="2" ry="2" />
<text  x="1189.63" y="367.5" ></text>
</g>
<g >
<title>__vma_link_rb (1 samples, 0.29%)</title><rect x="1186.6" y="197" width="3.4" height="15.0" fill="rgb(232,203,54)" rx="2" ry="2" />
<text  x="1189.63" y="207.5" ></text>
</g>
<g >
<title>task_rq_lock (1 samples, 0.29%)</title><rect x="360.6" y="213" width="3.4" height="15.0" fill="rgb(215,140,33)" rx="2" ry="2" />
<text  x="363.63" y="223.5" ></text>
</g>
<g >
<title>copy_fs_struct (2 samples, 0.57%)</title><rect x="374.1" y="245" width="6.8" height="15.0" fill="rgb(223,42,36)" rx="2" ry="2" />
<text  x="377.11" y="255.5" ></text>
</g>
<g >
<title>perf_event_alloc (66 samples, 18.86%)</title><rect x="694.4" y="197" width="222.5" height="15.0" fill="rgb(224,206,15)" rx="2" ry="2" />
<text  x="697.40" y="207.5" >perf_event_alloc</text>
</g>
<g >
<title>_cond_resched (1 samples, 0.29%)</title><rect x="893.3" y="165" width="3.4" height="15.0" fill="rgb(233,33,47)" rx="2" ry="2" />
<text  x="896.31" y="175.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (9 samples, 2.57%)</title><rect x="1152.9" y="357" width="30.4" height="15.0" fill="rgb(237,45,5)" rx="2" ry="2" />
<text  x="1155.91" y="367.5" >__..</text>
</g>
<g >
<title>perf_event_init_task (99 samples, 28.29%)</title><rect x="589.9" y="245" width="333.8" height="15.0" fill="rgb(251,206,4)" rx="2" ry="2" />
<text  x="592.89" y="255.5" >perf_event_init_task</text>
</g>
<g >
<title>clear_page_erms (3 samples, 0.86%)</title><rect x="468.5" y="165" width="10.1" height="15.0" fill="rgb(236,217,15)" rx="2" ry="2" />
<text  x="471.51" y="175.5" ></text>
</g>
<g >
<title>__vma_adjust (1 samples, 0.29%)</title><rect x="1186.6" y="213" width="3.4" height="15.0" fill="rgb(231,13,43)" rx="2" ry="2" />
<text  x="1189.63" y="223.5" ></text>
</g>
<g >
<title>arch_local_irq_enable (4 samples, 1.14%)</title><rect x="333.7" y="245" width="13.4" height="15.0" fill="rgb(226,41,17)" rx="2" ry="2" />
<text  x="336.66" y="255.5" ></text>
</g>
<g >
<title>memcpy_erms (5 samples, 1.43%)</title><rect x="509.0" y="229" width="16.8" height="15.0" fill="rgb(221,23,51)" rx="2" ry="2" />
<text  x="511.97" y="239.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (9 samples, 2.57%)</title><rect x="559.5" y="197" width="30.4" height="15.0" fill="rgb(209,93,37)" rx="2" ry="2" />
<text  x="562.54" y="207.5" >pe..</text>
</g>
<g >
<title>__do_munmap (1 samples, 0.29%)</title><rect x="1186.6" y="245" width="3.4" height="15.0" fill="rgb(223,22,12)" rx="2" ry="2" />
<text  x="1189.63" y="255.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.29%)</title><rect x="16.7" y="325" width="3.4" height="15.0" fill="rgb(219,73,21)" rx="2" ry="2" />
<text  x="19.74" y="335.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (2 samples, 0.57%)</title><rect x="579.8" y="69" width="6.7" height="15.0" fill="rgb(221,175,40)" rx="2" ry="2" />
<text  x="582.77" y="79.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.29%)</title><rect x="1183.3" y="213" width="3.3" height="15.0" fill="rgb(225,225,42)" rx="2" ry="2" />
<text  x="1186.26" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (255 samples, 72.86%)</title><rect x="283.1" y="341" width="859.7" height="15.0" fill="rgb(247,214,16)" rx="2" ry="2" />
<text  x="286.09" y="351.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.29%)</title><rect x="529.2" y="117" width="3.4" height="15.0" fill="rgb(219,197,37)" rx="2" ry="2" />
<text  x="532.20" y="127.5" ></text>
</g>
<g >
<title>rmqueue (2 samples, 0.57%)</title><rect x="482.0" y="165" width="6.7" height="15.0" fill="rgb(209,201,24)" rx="2" ry="2" />
<text  x="485.00" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (76 samples, 21.71%)</title><rect x="26.9" y="325" width="256.2" height="15.0" fill="rgb(249,135,37)" rx="2" ry="2" />
<text  x="29.86" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>ktime_get_real_ts64 (1 samples, 0.29%)</title><rect x="1173.1" y="293" width="3.4" height="15.0" fill="rgb(234,28,43)" rx="2" ry="2" />
<text  x="1176.14" y="303.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (2 samples, 0.57%)</title><rect x="549.4" y="229" width="6.8" height="15.0" fill="rgb(210,118,5)" rx="2" ry="2" />
<text  x="552.43" y="239.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.29%)</title><rect x="691.0" y="133" width="3.4" height="15.0" fill="rgb(241,206,7)" rx="2" ry="2" />
<text  x="694.03" y="143.5" ></text>
</g>
<g >
<title>rmqueue (2 samples, 0.57%)</title><rect x="886.6" y="37" width="6.7" height="15.0" fill="rgb(230,29,11)" rx="2" ry="2" />
<text  x="889.57" y="47.5" ></text>
</g>
<g >
<title>__x64_sys_clone (1 samples, 0.29%)</title><rect x="283.1" y="325" width="3.4" height="15.0" fill="rgb(250,173,18)" rx="2" ry="2" />
<text  x="286.09" y="335.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge (6 samples, 1.71%)</title><rect x="407.8" y="213" width="20.3" height="15.0" fill="rgb(216,109,17)" rx="2" ry="2" />
<text  x="410.83" y="223.5" ></text>
</g>
<g >
<title>__schedule (56 samples, 16.00%)</title><rect x="26.9" y="229" width="188.8" height="15.0" fill="rgb(216,78,8)" rx="2" ry="2" />
<text  x="29.86" y="239.5" >__schedule</text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.29%)</title><rect x="10.0" y="213" width="3.4" height="15.0" fill="rgb(245,223,26)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 1.71%)</title><rect x="1163.0" y="341" width="20.3" height="15.0" fill="rgb(236,10,7)" rx="2" ry="2" />
<text  x="1166.03" y="351.5" ></text>
</g>
<g >
<title>hrtimer_init (1 samples, 0.29%)</title><rect x="957.4" y="197" width="3.3" height="15.0" fill="rgb(213,13,41)" rx="2" ry="2" />
<text  x="960.37" y="207.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.29%)</title><rect x="532.6" y="229" width="3.3" height="15.0" fill="rgb(230,113,50)" rx="2" ry="2" />
<text  x="535.57" y="239.5" ></text>
</g>
<g >
<title>kvm_sched_clock_read (1 samples, 0.29%)</title><rect x="586.5" y="101" width="3.4" height="15.0" fill="rgb(236,117,31)" rx="2" ry="2" />
<text  x="589.51" y="111.5" ></text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.29%)</title><rect x="954.0" y="197" width="3.4" height="15.0" fill="rgb(238,80,33)" rx="2" ry="2" />
<text  x="957.00" y="207.5" ></text>
</g>
<g >
<title>ktime_get_with_offset (3 samples, 0.86%)</title><rect x="546.1" y="245" width="10.1" height="15.0" fill="rgb(246,8,20)" rx="2" ry="2" />
<text  x="549.06" y="255.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (3 samples, 0.86%)</title><rect x="535.9" y="213" width="10.2" height="15.0" fill="rgb(237,61,44)" rx="2" ry="2" />
<text  x="538.94" y="223.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.29%)</title><rect x="1183.3" y="261" width="3.3" height="15.0" fill="rgb(222,219,45)" rx="2" ry="2" />
<text  x="1186.26" y="271.5" ></text>
</g>
<g >
<title>___slab_alloc (41 samples, 11.71%)</title><rect x="755.1" y="149" width="138.2" height="15.0" fill="rgb(208,148,47)" rx="2" ry="2" />
<text  x="758.09" y="159.5" >___slab_alloc</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.29%)</title><rect x="1186.6" y="341" width="3.4" height="15.0" fill="rgb(246,168,33)" rx="2" ry="2" />
<text  x="1189.63" y="351.5" ></text>
</g>
<g >
<title>thread_group_cputime_adjusted (3 samples, 0.86%)</title><rect x="273.0" y="213" width="10.1" height="15.0" fill="rgb(240,210,12)" rx="2" ry="2" />
<text  x="275.97" y="223.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.29%)</title><rect x="10.0" y="229" width="3.4" height="15.0" fill="rgb(243,160,7)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>__wmemchr_ifunc (1 samples, 0.29%)</title><rect x="10.0" y="325" width="3.4" height="15.0" fill="rgb(254,200,49)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>cgroup_release (1 samples, 0.29%)</title><rect x="269.6" y="197" width="3.4" height="15.0" fill="rgb(207,47,3)" rx="2" ry="2" />
<text  x="272.60" y="207.5" ></text>
</g>
<g >
<title>schedule (56 samples, 16.00%)</title><rect x="26.9" y="245" width="188.8" height="15.0" fill="rgb(212,215,0)" rx="2" ry="2" />
<text  x="29.86" y="255.5" >schedule</text>
</g>
<g >
<title>local_clock (3 samples, 0.86%)</title><rect x="576.4" y="149" width="10.1" height="15.0" fill="rgb(212,192,39)" rx="2" ry="2" />
<text  x="579.40" y="159.5" ></text>
</g>
<g >
<title>alloc_slab_page (1 samples, 0.29%)</title><rect x="529.2" y="165" width="3.4" height="15.0" fill="rgb(224,229,49)" rx="2" ry="2" />
<text  x="532.20" y="175.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (2 samples, 0.57%)</title><rect x="549.4" y="213" width="6.8" height="15.0" fill="rgb(241,146,20)" rx="2" ry="2" />
<text  x="552.43" y="223.5" ></text>
</g>
<g >
<title>alloc_pid (4 samples, 1.14%)</title><rect x="320.2" y="245" width="13.5" height="15.0" fill="rgb(215,184,53)" rx="2" ry="2" />
<text  x="323.17" y="255.5" ></text>
</g>
<g >
<title>perf_event_task (9 samples, 2.57%)</title><rect x="559.5" y="229" width="30.4" height="15.0" fill="rgb(209,53,33)" rx="2" ry="2" />
<text  x="562.54" y="239.5" >pe..</text>
</g>
<g >
<title>_do_fork (252 samples, 72.00%)</title><rect x="293.2" y="277" width="849.6" height="15.0" fill="rgb(236,180,16)" rx="2" ry="2" />
<text  x="296.20" y="287.5" >_do_fork</text>
</g>
<g >
<title>page_counter_try_charge (2 samples, 0.57%)</title><rect x="414.6" y="197" width="6.7" height="15.0" fill="rgb(214,46,37)" rx="2" ry="2" />
<text  x="417.57" y="207.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.29%)</title><rect x="586.5" y="85" width="3.4" height="15.0" fill="rgb(233,66,49)" rx="2" ry="2" />
<text  x="589.51" y="95.5" ></text>
</g>
<g >
<title>idr_preload (1 samples, 0.29%)</title><rect x="323.5" y="229" width="3.4" height="15.0" fill="rgb(211,162,9)" rx="2" ry="2" />
<text  x="326.54" y="239.5" ></text>
</g>
<g >
<title>__do_sys_clone (252 samples, 72.00%)</title><rect x="293.2" y="293" width="849.6" height="15.0" fill="rgb(233,16,39)" rx="2" ry="2" />
<text  x="296.20" y="303.5" >__do_sys_clone</text>
</g>
<g >
<title>_raw_spin_lock_irq (1 samples, 0.29%)</title><rect x="269.6" y="181" width="3.4" height="15.0" fill="rgb(223,79,15)" rx="2" ry="2" />
<text  x="272.60" y="191.5" ></text>
</g>
<g >
<title>ktime_get (3 samples, 0.86%)</title><rect x="535.9" y="245" width="10.2" height="15.0" fill="rgb(212,205,18)" rx="2" ry="2" />
<text  x="538.94" y="255.5" ></text>
</g>
<g >
<title>alloc_pages_current (38 samples, 10.86%)</title><rect x="765.2" y="85" width="128.1" height="15.0" fill="rgb(229,114,33)" rx="2" ry="2" />
<text  x="768.20" y="95.5" >alloc_pages_curr..</text>
</g>
<g >
<title>wake_up_new_task (52 samples, 14.86%)</title><rect x="967.5" y="261" width="175.3" height="15.0" fill="rgb(228,152,2)" rx="2" ry="2" />
<text  x="970.49" y="271.5" >wake_up_new_task</text>
</g>
<g >
<title>sched_clock_local (2 samples, 0.57%)</title><rect x="579.8" y="117" width="6.7" height="15.0" fill="rgb(253,10,0)" rx="2" ry="2" />
<text  x="582.77" y="127.5" ></text>
</g>
<g >
<title>new_slab (1 samples, 0.29%)</title><rect x="529.2" y="197" width="3.4" height="15.0" fill="rgb(217,38,3)" rx="2" ry="2" />
<text  x="532.20" y="207.5" ></text>
</g>
<g >
<title>release_task (16 samples, 4.57%)</title><rect x="219.0" y="213" width="54.0" height="15.0" fill="rgb(222,0,10)" rx="2" ry="2" />
<text  x="222.03" y="223.5" >relea..</text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.29%)</title><rect x="1186.6" y="325" width="3.4" height="15.0" fill="rgb(232,189,0)" rx="2" ry="2" />
<text  x="1189.63" y="335.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.29%)</title><rect x="370.7" y="197" width="3.4" height="15.0" fill="rgb(249,18,25)" rx="2" ry="2" />
<text  x="373.74" y="207.5" ></text>
</g>
<g >
<title>inherit_task_group.isra.0.part.0 (96 samples, 27.43%)</title><rect x="596.6" y="229" width="323.7" height="15.0" fill="rgb(224,199,18)" rx="2" ry="2" />
<text  x="599.63" y="239.5" >inherit_task_group.isra.0.part.0</text>
</g>
<g >
<title>__sched_fork (3 samples, 0.86%)</title><rect x="950.6" y="229" width="10.1" height="15.0" fill="rgb(205,219,16)" rx="2" ry="2" />
<text  x="953.63" y="239.5" ></text>
</g>
<g >
<title>kernel_wait4 (76 samples, 21.71%)</title><rect x="26.9" y="277" width="256.2" height="15.0" fill="rgb(253,209,26)" rx="2" ry="2" />
<text  x="29.86" y="287.5" >kernel_wait4</text>
</g>
<g >
<title>page_counter_try_charge (2 samples, 0.57%)</title><rect x="421.3" y="181" width="6.8" height="15.0" fill="rgb(230,122,35)" rx="2" ry="2" />
<text  x="424.31" y="191.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.29%)</title><rect x="10.0" y="277" width="3.4" height="15.0" fill="rgb(250,39,1)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>inherit_event.isra.0 (92 samples, 26.29%)</title><rect x="606.7" y="213" width="310.2" height="15.0" fill="rgb(221,33,13)" rx="2" ry="2" />
<text  x="609.74" y="223.5" >inherit_event.isra.0</text>
</g>
<g >
<title>__x64_sys_clock_gettime (3 samples, 0.86%)</title><rect x="1169.8" y="309" width="10.1" height="15.0" fill="rgb(235,73,48)" rx="2" ry="2" />
<text  x="1172.77" y="319.5" ></text>
</g>
<g >
<title>__do_sys_wait4 (76 samples, 21.71%)</title><rect x="26.9" y="293" width="256.2" height="15.0" fill="rgb(240,18,10)" rx="2" ry="2" />
<text  x="29.86" y="303.5" >__do_sys_wait4</text>
</g>
<g >
<title>dup_task_struct (37 samples, 10.57%)</title><rect x="401.1" y="245" width="124.7" height="15.0" fill="rgb(208,101,42)" rx="2" ry="2" />
<text  x="404.09" y="255.5" >dup_task_struct</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.29%)</title><rect x="10.0" y="293" width="3.4" height="15.0" fill="rgb(244,124,52)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_clone (252 samples, 72.00%)</title><rect x="293.2" y="309" width="849.6" height="15.0" fill="rgb(245,52,40)" rx="2" ry="2" />
<text  x="296.20" y="319.5" >__x64_sys_clone</text>
</g>
<g >
<title>sched_clock_cpu (3 samples, 0.86%)</title><rect x="576.4" y="133" width="10.1" height="15.0" fill="rgb(236,69,13)" rx="2" ry="2" />
<text  x="579.40" y="143.5" ></text>
</g>
<g >
<title>all (350 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(250,79,18)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>init_dl_task_timer (2 samples, 0.57%)</title><rect x="954.0" y="213" width="6.7" height="15.0" fill="rgb(244,189,15)" rx="2" ry="2" />
<text  x="957.00" y="223.5" ></text>
</g>
<g >
<title>wait_consider_task (20 samples, 5.71%)</title><rect x="215.7" y="245" width="67.4" height="15.0" fill="rgb(221,136,28)" rx="2" ry="2" />
<text  x="218.66" y="255.5" >wait_co..</text>
</g>
<g >
<title>__alloc_pages_nodemask (38 samples, 10.86%)</title><rect x="765.2" y="69" width="128.1" height="15.0" fill="rgb(206,102,10)" rx="2" ry="2" />
<text  x="768.20" y="79.5" >__alloc_pages_no..</text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.29%)</title><rect x="1176.5" y="245" width="3.4" height="15.0" fill="rgb(219,113,39)" rx="2" ry="2" />
<text  x="1179.51" y="255.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="596.6" y="213" width="3.4" height="15.0" fill="rgb(243,120,21)" rx="2" ry="2" />
<text  x="599.63" y="223.5" ></text>
</g>
<g >
<title>perf_iterate_sb (9 samples, 2.57%)</title><rect x="559.5" y="213" width="30.4" height="15.0" fill="rgb(233,35,14)" rx="2" ry="2" />
<text  x="562.54" y="223.5" >pe..</text>
</g>
<g >
<title>perf_swevent_init_hrtimer (1 samples, 0.29%)</title><rect x="910.2" y="149" width="3.3" height="15.0" fill="rgb(251,194,3)" rx="2" ry="2" />
<text  x="913.17" y="159.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.29%)</title><rect x="1183.3" y="325" width="3.3" height="15.0" fill="rgb(206,188,16)" rx="2" ry="2" />
<text  x="1186.26" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (1 samples, 0.29%)</title><rect x="1163.0" y="325" width="3.4" height="15.0" fill="rgb(236,131,54)" rx="2" ry="2" />
<text  x="1166.03" y="335.5" ></text>
</g>
<g >
<title>copy_creds (3 samples, 0.86%)</title><rect x="364.0" y="245" width="10.1" height="15.0" fill="rgb(241,129,17)" rx="2" ry="2" />
<text  x="367.00" y="255.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.29%)</title><rect x="738.2" y="181" width="3.4" height="15.0" fill="rgb(212,65,53)" rx="2" ry="2" />
<text  x="741.23" y="191.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.29%)</title><rect x="1176.5" y="261" width="3.4" height="15.0" fill="rgb(237,98,21)" rx="2" ry="2" />
<text  x="1179.51" y="271.5" ></text>
</g>
<g >
<title>get_random_u64 (1 samples, 0.29%)</title><rect x="505.6" y="229" width="3.4" height="15.0" fill="rgb(250,31,18)" rx="2" ry="2" />
<text  x="508.60" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.29%)</title><rect x="1183.3" y="373" width="3.3" height="15.0" fill="rgb(250,33,15)" rx="2" ry="2" />
<text  x="1186.26" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.29%)</title><rect x="529.2" y="149" width="3.4" height="15.0" fill="rgb(231,13,53)" rx="2" ry="2" />
<text  x="532.20" y="159.5" ></text>
</g>
<g >
<title>copy_process (199 samples, 56.86%)</title><rect x="293.2" y="261" width="670.9" height="15.0" fill="rgb(250,152,9)" rx="2" ry="2" />
<text  x="296.20" y="271.5" >copy_process</text>
</g>
<g >
<title>__clone (255 samples, 72.86%)</title><rect x="283.1" y="357" width="859.7" height="15.0" fill="rgb(219,176,30)" rx="2" ry="2" />
<text  x="286.09" y="367.5" >__clone</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.29%)</title><rect x="1183.3" y="357" width="3.3" height="15.0" fill="rgb(253,119,31)" rx="2" ry="2" />
<text  x="1186.26" y="367.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.29%)</title><rect x="1183.3" y="277" width="3.3" height="15.0" fill="rgb(245,225,11)" rx="2" ry="2" />
<text  x="1186.26" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.29%)</title><rect x="316.8" y="245" width="3.4" height="15.0" fill="rgb(254,68,53)" rx="2" ry="2" />
<text  x="319.80" y="255.5" ></text>
</g>
<g >
<title>sched_clock (2 samples, 0.57%)</title><rect x="579.8" y="101" width="6.7" height="15.0" fill="rgb(241,110,18)" rx="2" ry="2" />
<text  x="582.77" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.29%)</title><rect x="1183.3" y="341" width="3.3" height="15.0" fill="rgb(230,67,25)" rx="2" ry="2" />
<text  x="1186.26" y="351.5" ></text>
</g>
<g >
<title>__vmalloc_node_range (19 samples, 5.43%)</title><rect x="428.1" y="229" width="64.0" height="15.0" fill="rgb(214,129,33)" rx="2" ry="2" />
<text  x="431.06" y="239.5" >__vmall..</text>
</g>
<g >
<title>cpu_clock_event_init (1 samples, 0.29%)</title><rect x="741.6" y="181" width="3.4" height="15.0" fill="rgb(241,0,4)" rx="2" ry="2" />
<text  x="744.60" y="191.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.29%)</title><rect x="313.4" y="229" width="3.4" height="15.0" fill="rgb(207,190,39)" rx="2" ry="2" />
<text  x="316.43" y="239.5" ></text>
</g>
<g >
<title>__GI___wait4 (78 samples, 22.29%)</title><rect x="20.1" y="357" width="263.0" height="15.0" fill="rgb(226,146,30)" rx="2" ry="2" />
<text  x="23.11" y="367.5" >__GI___wait4</text>
</g>
<g >
<title>__alloc_pages_nodemask (11 samples, 3.14%)</title><rect x="451.7" y="197" width="37.0" height="15.0" fill="rgb(221,205,0)" rx="2" ry="2" />
<text  x="454.66" y="207.5" >__a..</text>
</g>
<g >
<title>perf_event_task_output (6 samples, 1.71%)</title><rect x="569.7" y="181" width="20.2" height="15.0" fill="rgb(249,97,4)" rx="2" ry="2" />
<text  x="572.66" y="191.5" ></text>
</g>
<g >
<title>ktime_get_real_ts64 (1 samples, 0.29%)</title><rect x="1176.5" y="277" width="3.4" height="15.0" fill="rgb(252,137,0)" rx="2" ry="2" />
<text  x="1179.51" y="287.5" ></text>
</g>
<g >
<title>perf_pin_task_context (1 samples, 0.29%)</title><rect x="920.3" y="229" width="3.4" height="15.0" fill="rgb(221,221,11)" rx="2" ry="2" />
<text  x="923.29" y="239.5" ></text>
</g>
<g >
<title>__split_vma (1 samples, 0.29%)</title><rect x="1186.6" y="229" width="3.4" height="15.0" fill="rgb(238,131,29)" rx="2" ry="2" />
<text  x="1189.63" y="239.5" ></text>
</g>
<g >
<title>__lock_text_start (52 samples, 14.86%)</title><rect x="967.5" y="245" width="175.3" height="15.0" fill="rgb(218,26,6)" rx="2" ry="2" />
<text  x="970.49" y="255.5" >__lock_text_start</text>
</g>
<g >
<title>get_task_pid (1 samples, 0.29%)</title><rect x="964.1" y="261" width="3.4" height="15.0" fill="rgb(214,58,33)" rx="2" ry="2" />
<text  x="967.11" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_node (2 samples, 0.57%)</title><rect x="444.9" y="181" width="6.8" height="15.0" fill="rgb(235,63,9)" rx="2" ry="2" />
<text  x="447.91" y="191.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.29%)</title><rect x="1186.6" y="277" width="3.4" height="15.0" fill="rgb(229,183,45)" rx="2" ry="2" />
<text  x="1189.63" y="287.5" ></text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.29%)</title><rect x="957.4" y="181" width="3.3" height="15.0" fill="rgb(242,24,50)" rx="2" ry="2" />
<text  x="960.37" y="191.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.29%)</title><rect x="920.3" y="213" width="3.4" height="15.0" fill="rgb(241,19,41)" rx="2" ry="2" />
<text  x="923.29" y="223.5" ></text>
</g>
<g >
<title>__libc_start_main (336 samples, 96.00%)</title><rect x="20.1" y="373" width="1132.8" height="15.0" fill="rgb(207,152,21)" rx="2" ry="2" />
<text  x="23.11" y="383.5" >__libc_start_main</text>
</g>
<g >
<title>__srcu_read_lock (3 samples, 0.86%)</title><rect x="728.1" y="181" width="10.1" height="15.0" fill="rgb(254,144,41)" rx="2" ry="2" />
<text  x="731.11" y="191.5" ></text>
</g>
<g >
<title>account_kernel_stack (2 samples, 0.57%)</title><rect x="492.1" y="229" width="6.8" height="15.0" fill="rgb(215,197,6)" rx="2" ry="2" />
<text  x="495.11" y="239.5" ></text>
</g>
<g >
<title>mntget (1 samples, 0.29%)</title><rect x="377.5" y="213" width="3.4" height="15.0" fill="rgb(237,43,34)" rx="2" ry="2" />
<text  x="380.49" y="223.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.29%)</title><rect x="10.0" y="245" width="3.4" height="15.0" fill="rgb(237,226,38)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>__mutex_init (2 samples, 0.57%)</title><rect x="721.4" y="181" width="6.7" height="15.0" fill="rgb(216,158,28)" rx="2" ry="2" />
<text  x="724.37" y="191.5" ></text>
</g>
<g >
<title>cgroup_css_set_put_fork (1 samples, 0.29%)</title><rect x="353.9" y="229" width="3.4" height="15.0" fill="rgb(234,214,1)" rx="2" ry="2" />
<text  x="356.89" y="239.5" ></text>
</g>
<g >
<title>___slab_alloc (1 samples, 0.29%)</title><rect x="529.2" y="213" width="3.4" height="15.0" fill="rgb(245,141,23)" rx="2" ry="2" />
<text  x="532.20" y="223.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.29%)</title><rect x="1186.6" y="293" width="3.4" height="15.0" fill="rgb(226,143,32)" rx="2" ry="2" />
<text  x="1189.63" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 1.43%)</title><rect x="1166.4" y="325" width="16.9" height="15.0" fill="rgb(243,35,1)" rx="2" ry="2" />
<text  x="1169.40" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_wait4 (76 samples, 21.71%)</title><rect x="26.9" y="309" width="256.2" height="15.0" fill="rgb(214,2,14)" rx="2" ry="2" />
<text  x="29.86" y="319.5" >__x64_sys_wait4</text>
</g>
<g >
<title>__lock_text_start (7 samples, 2.00%)</title><rect x="637.1" y="197" width="23.6" height="15.0" fill="rgb(243,123,35)" rx="2" ry="2" />
<text  x="640.09" y="207.5" >_..</text>
</g>
<g >
<title>kmem_cache_alloc_trace (1 samples, 0.29%)</title><rect x="603.4" y="197" width="3.3" height="15.0" fill="rgb(221,139,42)" rx="2" ry="2" />
<text  x="606.37" y="207.5" ></text>
</g>
<g >
<title>posix_get_realtime_timespec (1 samples, 0.29%)</title><rect x="1179.9" y="309" width="3.4" height="15.0" fill="rgb(226,127,24)" rx="2" ry="2" />
<text  x="1182.89" y="319.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.29%)</title><rect x="10.0" y="309" width="3.4" height="15.0" fill="rgb(245,198,12)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>__perf_event__output_id_sample (1 samples, 0.29%)</title><rect x="573.0" y="165" width="3.4" height="15.0" fill="rgb(212,139,54)" rx="2" ry="2" />
<text  x="576.03" y="175.5" ></text>
</g>
<g >
<title>cpu_cgroup_fork (2 samples, 0.57%)</title><rect x="380.9" y="245" width="6.7" height="15.0" fill="rgb(249,4,4)" rx="2" ry="2" />
<text  x="383.86" y="255.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.57%)</title><rect x="10.0" y="373" width="6.7" height="15.0" fill="rgb(239,34,3)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.29%)</title><rect x="330.3" y="213" width="3.4" height="15.0" fill="rgb(252,94,37)" rx="2" ry="2" />
<text  x="333.29" y="223.5" ></text>
</g>
<g >
<title>__do_sys_clone (1 samples, 0.29%)</title><rect x="289.8" y="309" width="3.4" height="15.0" fill="rgb(209,51,32)" rx="2" ry="2" />
<text  x="292.83" y="319.5" ></text>
</g>
<g >
<title>__mutex_init (3 samples, 0.86%)</title><rect x="660.7" y="197" width="10.1" height="15.0" fill="rgb(220,54,34)" rx="2" ry="2" />
<text  x="663.69" y="207.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (9 samples, 2.57%)</title><rect x="1152.9" y="373" width="30.4" height="15.0" fill="rgb(243,10,48)" rx="2" ry="2" />
<text  x="1155.91" y="383.5" >cl..</text>
</g>
<g >
<title>_cond_resched (1 samples, 0.29%)</title><rect x="691.0" y="181" width="3.4" height="15.0" fill="rgb(220,168,3)" rx="2" ry="2" />
<text  x="694.03" y="191.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.29%)</title><rect x="1183.3" y="245" width="3.3" height="15.0" fill="rgb(216,152,9)" rx="2" ry="2" />
<text  x="1186.26" y="255.5" ></text>
</g>
<g >
<title>allocate_slab (41 samples, 11.71%)</title><rect x="755.1" y="117" width="138.2" height="15.0" fill="rgb(236,197,23)" rx="2" ry="2" />
<text  x="758.09" y="127.5" >allocate_slab</text>
</g>
<g >
<title>posix_get_realtime_timespec (1 samples, 0.29%)</title><rect x="1176.5" y="293" width="3.4" height="15.0" fill="rgb(247,200,49)" rx="2" ry="2" />
<text  x="1179.51" y="303.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.29%)</title><rect x="1186.6" y="309" width="3.4" height="15.0" fill="rgb(239,214,46)" rx="2" ry="2" />
<text  x="1189.63" y="319.5" ></text>
</g>
<g >
<title>sched_fork (7 samples, 2.00%)</title><rect x="937.1" y="245" width="23.6" height="15.0" fill="rgb(239,173,53)" rx="2" ry="2" />
<text  x="940.14" y="255.5" >s..</text>
</g>
<g >
<title>alloc_slab_page (39 samples, 11.14%)</title><rect x="761.8" y="101" width="131.5" height="15.0" fill="rgb(235,108,40)" rx="2" ry="2" />
<text  x="764.83" y="111.5" >alloc_slab_page</text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.29%)</title><rect x="374.1" y="229" width="3.4" height="15.0" fill="rgb(238,183,17)" rx="2" ry="2" />
<text  x="377.11" y="239.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (2 samples, 0.57%)</title><rect x="367.4" y="213" width="6.7" height="15.0" fill="rgb(209,61,23)" rx="2" ry="2" />
<text  x="370.37" y="223.5" ></text>
</g>
<g >
<title>prepare_creds (3 samples, 0.86%)</title><rect x="364.0" y="229" width="10.1" height="15.0" fill="rgb(237,178,42)" rx="2" ry="2" />
<text  x="367.00" y="239.5" ></text>
</g>
<g >
<title>local_clock (1 samples, 0.29%)</title><rect x="586.5" y="165" width="3.4" height="15.0" fill="rgb(253,85,26)" rx="2" ry="2" />
<text  x="589.51" y="175.5" ></text>
</g>
<g >
<title>alloc_perf_context (2 samples, 0.57%)</title><rect x="600.0" y="213" width="6.7" height="15.0" fill="rgb(208,190,50)" rx="2" ry="2" />
<text  x="603.00" y="223.5" ></text>
</g>
<g >
<title>map_kernel_range_noflush (1 samples, 0.29%)</title><rect x="488.7" y="213" width="3.4" height="15.0" fill="rgb(221,223,11)" rx="2" ry="2" />
<text  x="491.74" y="223.5" ></text>
</g>
<g >
<title>cgroup_post_fork (5 samples, 1.43%)</title><rect x="347.1" y="245" width="16.9" height="15.0" fill="rgb(251,102,13)" rx="2" ry="2" />
<text  x="350.14" y="255.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.29%)</title><rect x="529.2" y="133" width="3.4" height="15.0" fill="rgb(226,188,9)" rx="2" ry="2" />
<text  x="532.20" y="143.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.29%)</title><rect x="1183.3" y="309" width="3.3" height="15.0" fill="rgb(243,97,46)" rx="2" ry="2" />
<text  x="1186.26" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (254 samples, 72.57%)</title><rect x="286.5" y="325" width="856.3" height="15.0" fill="rgb(251,180,47)" rx="2" ry="2" />
<text  x="289.46" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>cpuset_fork (2 samples, 0.57%)</title><rect x="387.6" y="245" width="6.7" height="15.0" fill="rgb(226,15,44)" rx="2" ry="2" />
<text  x="390.60" y="255.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.29%)</title><rect x="478.6" y="165" width="3.4" height="15.0" fill="rgb(222,11,27)" rx="2" ry="2" />
<text  x="481.63" y="175.5" ></text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 0.29%)</title><rect x="374.1" y="213" width="3.4" height="15.0" fill="rgb(211,168,47)" rx="2" ry="2" />
<text  x="377.11" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.29%)</title><rect x="16.7" y="309" width="3.4" height="15.0" fill="rgb(225,51,13)" rx="2" ry="2" />
<text  x="19.74" y="319.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.29%)</title><rect x="1183.3" y="229" width="3.3" height="15.0" fill="rgb(236,146,23)" rx="2" ry="2" />
<text  x="1186.26" y="239.5" ></text>
</g>
<g >
<title>get_common_indices.constprop.0 (1 samples, 0.29%)</title><rect x="13.4" y="357" width="3.3" height="15.0" fill="rgb(233,55,22)" rx="2" ry="2" />
<text  x="16.37" y="367.5" ></text>
</g>
<g >
<title>thread_group_cputime (3 samples, 0.86%)</title><rect x="273.0" y="197" width="10.1" height="15.0" fill="rgb(220,5,40)" rx="2" ry="2" />
<text  x="275.97" y="207.5" ></text>
</g>
</g>
</svg>
